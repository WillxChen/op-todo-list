(()=>{"use strict";const t=(t,e=crypto.randomUUID().slice(0,8))=>{const s=[],a=(t=>{const e=e=>t.findIndex((t=>t.id===e));return{getTaskById:e=>t.find((t=>t.id===e)),createTask:e=>(t.push({id:crypto.randomUUID().slice(0,8),title:e}),t[t.length-1]),updateTask:(s,a)=>{const n=e(s);return t[n]={...t[n],...a},t[n]},removeTask:s=>{const a=e(s);t.splice(a,1)}}})(s);return{getTitle:()=>t,getId:()=>e,getTasks:()=>s,createTask:t=>a.createTask(t),getTaskById:t=>a.getTaskById(t),updateTask:(t,e)=>a.updateTask(t,e),removeTask:t=>a.removeTask(t)}},{appendCustomElement:e,createCustomElement:s}=(()=>{function t(t){const{tagName:e,classList:s,textContent:a,attributes:n}=t,i=document.createElement(e);if("string"==typeof s?i.classList.add(s):Array.isArray(s)&&i.classList.add(...s),a&&(i.textContent=a),Array.isArray(n)){const[t,e]=n;i.setAttribute(t,e)}return i}return{appendCustomElement:function(e){const{target:s}=e,a=document.querySelector(s),n=t(e);a.appendChild(n)},createCustomElement:t}})(),a=t=>{if(!t)return"";const e=new Date(t);return e.setHours(24,0,0,0),e.toLocaleDateString("en-US",{month:"2-digit",day:"2-digit",year:"2-digit"})},n=(t,e)=>{const a=t=>{const e=document.createDocumentFragment(),a=s({tagName:"textarea",classList:"edit-title"});a.value=t.title,a.name="title";const i=s({tagName:"textarea",classList:"edit-description",attributes:["placeholder","Add a description"]});i.value=t.description||"",i.name="description";const r=s({tagName:"input",attributes:["type","date"],classList:"edit-date"}),c=new Date;t.dueDate?r.value=t.dueDate:r.valueAsDate=new Date(c.getFullYear(),c.getMonth(),c.getDate(),12),r.name="dueDate";const o=s({tagName:"select",classList:"edit-difficulty"});o.value=t.difficulty,o.name="difficulty";const d=["","Easy","Medium","Hard"].map((t=>s({tagName:"option",textContent:t,attributes:["value",`${t}`]})));o.append(...d);const l=n(t);return e.append(a,i,r,o,l),e},n=()=>{const a=s({tagName:"div",classList:"form-controls"}),n=s({tagName:"button",classList:"submit-btn",textContent:"Submit"}),i=s({tagName:"button",classList:"cancel-btn",textContent:"Cancel"});return i.onclick=s=>((t,e)=>{t.preventDefault();const s=t.target.closest("form"),a=s.parentNode,n=a.querySelector(".main-details");s.remove(),a.classList.remove("isEditable");const i=l(e);n.append(i)})(s,t.getTaskById(e)),a.append(i,n),a};return{appendEditTaskForm:s=>{const n=(()=>{const s=document.createElement("form"),n=t.getTaskById(e);return s.id="edit-task",s.append(a(n)),s.addEventListener("submit",(e=>{((t,e,s)=>{t.preventDefault();const a=t.target,n=a.parentNode,i=n.querySelector(".main-details"),r=n.querySelector(".bottom-panel"),c=new FormData(a),o={};for(const[t,e]of c)o[t]=e;const d=e.updateTask(s.id,o);a.remove();const u=l(d);i.append(u),r.replaceChildren();const p=m(d);r.append(p),n.classList.remove("isEditable")})(e,t,n)})),s})();return s.append(n),n}}},i=(t,e)=>{const a=((t,e)=>({setEditMode:s=>{const a=s.target.closest(".task");if(a.classList.contains("isEditable"))return;const i=a.querySelector(".main-details");a.classList.add("isEditable"),i.replaceChildren(),a.classList.contains("expanded")&&(a.querySelector(".expanded-details").remove(),a.classList.remove("expanded"));const r=n(t,e.id).appendEditTaskForm(a);[...r.getElementsByTagName("textarea")].forEach((t=>{t.addEventListener("keydown",(t=>{if("Enter"===t.key&&!t.shiftKey){t.preventDefault();const e=new Event("submit",{bubbles:!0,cancelable:!0});r.dispatchEvent(e)}}))}))},setPriority:s=>{t.getTaskById(e.id).priority?(t.updateTask(e.id,{priority:!1}),s.target.closest("img").src="../src/imgs/noun-star-4485746.svg"):(t.updateTask(e.id,{priority:!0}),s.target.closest("img").src="../src/imgs/noun-star-4485827.svg"),s.target.closest(".task").classList.toggle("isPriority"),s.target.closest("img").classList.toggle("filter-gray"),s.target.closest("img").classList.toggle("filter-yellow")},deleteTask:s=>{t.removeTask(e.id),s.target.closest(".task").remove()}}))(t,e),i=[{name:"Edit",imgSrc:"../src/imgs/noun-quill-4626718.svg",className:"filter-gray",onClick:t=>a.setEditMode(t)},{name:"Set Priority",imgSrc:"../src/imgs/noun-star-4485746.svg",className:"filter-gray",onClick:t=>a.setPriority(t)},{name:"Delete",imgSrc:"../src/imgs/noun-skull-4485674.svg",className:"filter-red",onClick:t=>a.deleteTask(t)}];return{createToolbar:()=>{const t=s({tagName:"div",classList:"toolbar"});return t.append((t=>{const e=document.createDocumentFragment();return t.forEach((t=>{const{name:a,imgSrc:n,className:i,onClick:r}=t,c=s({tagName:"button",attributes:["aria-label",`${a}`]}),o=s({tagName:"img",attributes:["src",`${n}`],classList:i});c.onclick=r,c.append(o),e.append(c)})),e})(i)),t}}},r=(()=>{const t={};return{getEvents:()=>t,subscribe:(e,s)=>{let a;return console.log("subbing"),t.hasOwnProperty(e)||(t[e]=[]),a=t[e].push(s)-1,{unsubscribe(){t[e].splice(a,1)}}},publish:(e,s={})=>(console.log("pubbing"),t.hasOwnProperty(e)?t[e].map((t=>t(s))):[])}})();r.subscribe("taskCreated",(function(t){const{list:e,task:s}=t;c(e,s)}));const c=(t,e)=>{const s=document.querySelector(`[data-id="${t.getId()}"]`).querySelector(".tasks-container"),a=o(t,e);s.prepend(a)},o=(t,e)=>{const s=document.createElement("div");s.className="task",s.dataset.id=e.id;const a=i(t,e).createToolbar(t,s),n=d(e),r=u(t,e.id);return s.append(a),s.append(n),s.append(r),s.addEventListener("dblclick",(s=>{g(s,e.id,t)})),s.addEventListener("click",(s=>{y(s,t,e.id)})),s.addEventListener("mouseover",(()=>{a.style.opacity="1",a.style.visibility="visible"})),s.addEventListener("mouseout",(()=>{a.style.opacity="0",a.style.visibility="hidden"})),s},d=t=>{const e=document.createElement("div");return e.classList.add("main-details"),e.appendChild(l(t)),e},l=t=>{const e=document.createDocumentFragment(),a=s({tagName:"p",classList:"task-title",textContent:t.title}),n=t.description?s({tagName:"p",classList:"task-description",textContent:t.description}):" ";return e.append(a,n),e},u=(t,e)=>{const a=t.getTaskById(e),n=s({tagName:"div",classList:"bottom-panel"});return n.append(m(a)),n},m=t=>{const e=document.createDocumentFragment(),n=s({tagName:"p",textContent:(t=>{switch(t){case"Easy":return"⚔️";case"Medium":return"⚔️⚔️";case"Hard":return"⚔️⚔️⚔️";default:return""}})(t.difficulty)}),i=s({tagName:"p",textContent:a(t.dueDate)||""});return e.append(i,n),e};function p(){this.style.height="auto",this.style.height=this.scrollHeight+"px"}const g=(t,e,s)=>{const a=t.target;if(!a.classList.contains("task-title"))return;const n=a.cloneNode(!0),i=document.createElement("textarea"),r=s.getTaskById(e);i.classList.add("temp-input"),i.value=r.title,i.style.wordBreak="break-word",a.replaceWith(i),i.style.height="auto",i.style.height=i.scrollHeight+"px",i.addEventListener("keydown",(t=>{"Enter"===t.key&&i.blur()})),i.addEventListener("blur",(()=>{s.updateTask(e,{title:i.value}),n.textContent=i.value,i.replaceWith(n)}),{once:!0}),i.addEventListener("input",p,!1),i.focus()},y=(t,e,n)=>{if(t.target.classList.contains("isEditable")||!t.target.classList.contains("task"))return;const i=t.target,r=i.querySelector(".main-details"),c=i.querySelector(".expanded-details");i.classList.contains("isEditable")||(c?(c.remove(),i.classList.remove("expanded")):(((t,e)=>{const n=(t=>{const{dueDate:e,difficulty:n}=t,i=document.createDocumentFragment(),r=document.createElement("div");return r.classList.add("expanded-details"),i.append(r),r.append(s({tagName:"p",classList:"due-date",textContent:a(e)})),console.log(e),r.append(s({tagName:"p",classList:"difficulty",textContent:n})),i})(e);t.after(n)})(r,e.getTaskById(n)),i.classList.add("expanded")))};function k(t){v(t),b(t),f(t)}r.subscribe("listCreated",k);const v=t=>{e({target:".lists-container",tagName:"div",classList:["list"],attributes:["data-id",t.getId()]})},b=t=>{const s=document.querySelector(`[data-id="${t.getId()}"]`);e({target:`[data-id="${t.getId()}"]`,tagName:"h2",textContent:t.getTitle()}),s.appendChild(L(t))},L=t=>{const e=document.createElement("form");e.className="task-form";const a=s({tagName:"input",classList:"task-input",attributes:["placeholder","Add a task"]});return e.appendChild(a),a.addEventListener("keydown",(e=>{((t,e)=>{if("Enter"===t.key){t.preventDefault();const s=t.target.value,a=e.createTask(s);t.target.value="",r.publish("taskCreated",{list:e,task:a})}})(e,t)})),e},f=t=>{e({target:`[data-id="${t.getId()}"]`,tagName:"div",classList:"tasks-container"})},h=k,{checkForLists:E}={checkForLists:t=>{const e=t.getLists();e.length?e.forEach((t=>h(t))):(t=>{const e=t.createList("Habits"),s=e.createTask("Create your first habit!");r.publish("listCreated",e),r.publish("taskCreated",{list:e,task:s})})(t)}},T=(()=>{const t=[];return{getProjects:()=>t,addProject:e=>t.push(e)}})();T.addProject(((e,s=crypto.randomUUID().slice(0,8))=>{const a=[];return{getTitle:()=>e,getId:()=>s,getLists:()=>a,createList:e=>(a.push(t(e)),a[a.length-1]),getListById:t=>{const e=a.findIndex((e=>e.getId()===t));return a[e]}}})("Default"));const C=T.getProjects()[0],N=(()=>{const t=document.querySelector("#list-input");return{init:()=>{E(C),t.addEventListener("keydown",(t=>{((t,e)=>{if("Enter"===t.key){t.preventDefault();const s=t.target.value,a=e.createList(s);t.target.value="",r.publish("listCreated",a)}})(t,C)}))}}})();N.init()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,