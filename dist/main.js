(()=>{"use strict";const{appendCustomElement:t,createCustomElement:e}=(()=>{function t(t){const{tagName:e,classList:s,textContent:a,attributes:n}=t,r=document.createElement(e);if("string"==typeof s?r.classList.add(s):Array.isArray(s)&&r.classList.add(...s),a&&(r.textContent=a),Array.isArray(n)){const[t,e]=n;r.setAttribute(t,e)}return r}return{appendCustomElement:function(e){const{target:s}=e,a=document.querySelector(s),n=t(e);a.appendChild(n)},createCustomElement:t}})(),s=t=>{if(!t)return"";const e=new Date(t);return e.setHours(24,0,0,0),e.toLocaleDateString("en-US",{month:"2-digit",day:"2-digit",year:"2-digit"})},a=(t,s)=>{const a=t=>{const s=document.createDocumentFragment(),a=e({tagName:"textarea",classList:"edit-title"});a.value=t.title,a.name="title";const r=e({tagName:"textarea",classList:"edit-description",attributes:["placeholder","Add a description"]});r.value=t.description||"",r.name="description";const i=e({tagName:"input",attributes:["type","date"],classList:"edit-date"}),c=new Date;t.dueDate?i.value=t.dueDate:i.valueAsDate=new Date(c.getFullYear(),c.getMonth(),c.getDate(),12),i.name="dueDate";const o=e({tagName:"select",classList:"edit-difficulty"});o.value=t.difficulty,o.name="difficulty";const l=["","Easy","Medium","Hard"].map((t=>e({tagName:"option",textContent:t,attributes:["value",`${t}`]})));o.append(...l);const d=n(t);return s.append(a,r,i,o,d),s},n=()=>{const a=e({tagName:"div",classList:"form-controls"}),n=e({tagName:"button",classList:"submit-btn",textContent:"Submit"}),r=e({tagName:"button",classList:"cancel-btn",textContent:"Cancel"});return r.onclick=e=>((t,e)=>{t.preventDefault();const s=t.target.closest("form"),a=s.parentNode,n=a.querySelector(".main-details");s.remove(),a.classList.remove("isEditable");const r=d(e);n.append(r)})(e,t.getTaskById(s)),a.append(r,n),a};return{appendEditTaskForm:e=>{const n=(()=>{const e=document.createElement("form"),n=t.getTaskById(s);return e.id="edit-task",e.append(a(n)),e.addEventListener("submit",(e=>{((t,e,s)=>{t.preventDefault();const a=t.target,n=a.parentNode,r=n.querySelector(".main-details"),i=n.querySelector(".bottom-panel"),c=new FormData(a),o={};for(const[t,e]of c)o[t]=e;const l=e.updateTask(s.id,o);a.remove();const u=d(l);r.append(u),i.replaceChildren();const g=p(l);i.append(g),n.classList.remove("isEditable")})(e,t,n)})),e})();return e.append(n),n}}},n=(t,s)=>{const n=((t,e)=>({setEditMode:s=>{const n=s.target.closest(".task");if(n.classList.contains("isEditable"))return;const r=n.querySelector(".main-details");n.classList.add("isEditable"),r.replaceChildren(),n.classList.contains("expanded")&&(n.querySelector(".expanded-details").remove(),n.classList.remove("expanded"));const i=a(t,e.id).appendEditTaskForm(n);[...i.getElementsByTagName("textarea")].forEach((t=>{t.addEventListener("keydown",(t=>{if("Enter"===t.key&&!t.shiftKey){t.preventDefault();const e=new Event("submit",{bubbles:!0,cancelable:!0});i.dispatchEvent(e)}}))}))},setPriority:s=>{t.getTaskById(e.id).priority?(t.updateTask(e.id,{priority:!1}),s.target.closest("img").src="../src/imgs/noun-star-4485746.svg"):(t.updateTask(e.id,{priority:!0}),s.target.closest("img").src="../src/imgs/noun-star-4485827.svg"),s.target.closest(".task").classList.toggle("isPriority"),s.target.closest("img").classList.toggle("filter-gray"),s.target.closest("img").classList.toggle("filter-yellow")},deleteTask:s=>{t.removeTask(e.id),s.target.closest(".task").remove()}}))(t,s),r=[{name:"Edit",imgSrc:"../src/imgs/noun-quill-4626718.svg",className:"filter-gray",onClick:t=>n.setEditMode(t)},{name:"Set Priority",imgSrc:"../src/imgs/noun-star-4485746.svg",className:"filter-gray",onClick:t=>n.setPriority(t)},{name:"Delete",imgSrc:"../src/imgs/noun-skull-4485674.svg",className:"filter-red",onClick:t=>n.deleteTask(t)}];return{createToolbar:()=>{const t=e({tagName:"div",classList:"toolbar"});return t.append((t=>{const s=document.createDocumentFragment();return t.forEach((t=>{const{name:a,imgSrc:n,className:r,onClick:i}=t,c=e({tagName:"button",attributes:["aria-label",`${a}`]}),o=e({tagName:"img",attributes:["src",`${n}`],classList:r});c.onclick=i,c.append(o),s.append(c)})),s})(r)),t}}},r=(()=>{const t={};return{getEvents:()=>t,subscribe:(e,s)=>{let a;return console.log(`Subscribing to ${e}`),t.hasOwnProperty(e)||(t[e]=[]),a=t[e].push(s)-1,{unsubscribe(){t[e].splice(a,1)}}},publish:(e,s={})=>(console.log(`Executing ${e}`),t.hasOwnProperty(e)?t[e].map((t=>t(s))):[])}})();function i(t){console.log("Rendering task");const{list:e,task:s}=t;c(e,s)}r.subscribe("taskCreated",i),r.subscribe("taskReconstructed",i);const c=(t,e)=>{const s=document.querySelector(`[data-id="${t.getId()}"]`).querySelector(".tasks-container"),a=o(t,e);s.prepend(a)},o=(t,e)=>{const s=document.createElement("div");s.className="task",s.dataset.id=e.id;const a=n(t,e).createToolbar(t,s),r=l(e),i=u(t,e.id);return s.append(a),s.append(r),s.append(i),s.addEventListener("dblclick",(s=>{m(s,e.id,t)})),s.addEventListener("click",(s=>{y(s,t,e.id)})),s.addEventListener("mouseover",(()=>{a.style.opacity="1",a.style.visibility="visible"})),s.addEventListener("mouseout",(()=>{a.style.opacity="0",a.style.visibility="hidden"})),s},l=t=>{const e=document.createElement("div");return e.classList.add("main-details"),e.appendChild(d(t)),e},d=t=>{const s=document.createDocumentFragment(),a=e({tagName:"p",classList:"task-title",textContent:t.title}),n=t.description?e({tagName:"p",classList:"task-description",textContent:t.description}):" ";return s.append(a,n),s},u=(t,s)=>{const a=t.getTaskById(s),n=e({tagName:"div",classList:"bottom-panel"});return n.append(p(a)),n},p=t=>{const a=document.createDocumentFragment(),n=e({tagName:"p",textContent:(t=>{switch(t){case"Easy":return"⚔️";case"Medium":return"⚔️⚔️";case"Hard":return"⚔️⚔️⚔️";default:return""}})(t.difficulty)}),r=e({tagName:"p",textContent:s(t.dueDate)||""});return a.append(r,n),a};function g(){this.style.height="auto",this.style.height=this.scrollHeight+"px"}const m=(t,e,s)=>{const a=t.target;if(!a.classList.contains("task-title"))return;const n=a.cloneNode(!0),r=document.createElement("textarea"),i=s.getTaskById(e);r.classList.add("temp-input"),r.value=i.title,r.style.wordBreak="break-word",a.replaceWith(r),r.style.height="auto",r.style.height=r.scrollHeight+"px",r.addEventListener("keydown",(t=>{"Enter"===t.key&&r.blur()})),r.addEventListener("blur",(()=>{s.updateTask(e,{title:r.value}),n.textContent=r.value,r.replaceWith(n)}),{once:!0}),r.addEventListener("input",g,!1),r.focus()},y=(t,a,n)=>{if(t.target.classList.contains("isEditable")||!t.target.classList.contains("task"))return;const r=t.target,i=r.querySelector(".main-details"),c=r.querySelector(".expanded-details");r.classList.contains("isEditable")||(c?(c.remove(),r.classList.remove("expanded")):(((t,a)=>{const n=(t=>{const{dueDate:a,difficulty:n}=t,r=document.createDocumentFragment(),i=document.createElement("div");return i.classList.add("expanded-details"),r.append(i),i.append(e({tagName:"p",classList:"due-date",textContent:s(a)})),console.log(a),i.append(e({tagName:"p",classList:"difficulty",textContent:n})),r})(a);t.after(n)})(i,a.getTaskById(n)),r.classList.add("expanded")))};function k(t){console.log("Rendering List"),b(t),f(t),L(t)}r.subscribe("listCreated",k),r.subscribe("listReconstructed",k);const b=e=>{t({target:".lists-container",tagName:"div",classList:["list"],attributes:["data-id",e.getId()]})},f=e=>{const s=document.querySelector(`[data-id="${e.getId()}"]`);t({target:`[data-id="${e.getId()}"]`,tagName:"h2",textContent:e.getTitle()}),s.appendChild(v(e))},v=t=>{const s=document.createElement("form");s.className="task-form";const a=e({tagName:"input",classList:"task-input",attributes:["placeholder","Add a task"]});return s.appendChild(a),a.addEventListener("keydown",(e=>{((t,e)=>{if("Enter"===t.key){t.preventDefault();const s=t.target.value,a=e.createTask(s);t.target.value="",r.publish("taskCreated",{list:e,task:a})}})(e,t)})),s},L=e=>{t({target:`[data-id="${e.getId()}"]`,tagName:"div",classList:"tasks-container"})},h=(()=>{let t=null;return{getCurrentProject:()=>t,setCurrentProject:e=>(console.log("Setting current project: "+e.getTitle()),t=e,r.publish("currentProjectSet",{title:e.getTitle(),id:e.getId()}),t)}})(),E=(t,e=crypto.randomUUID().slice(0,8))=>{const s=[],a=(t=>{const e=e=>t.findIndex((t=>t.id===e));return{getTaskById:e=>t.find((t=>t.id===e)),createTask:(e,s=crypto.randomUUID().slice(0,8))=>(t.push({id:s,title:e}),t[t.length-1]),updateTask:(s,a)=>{const n=e(s);return t[n]={...t[n],...a},t[n]},removeTask:s=>{const a=e(s);t.splice(a,1)}}})(s);return{getTitle:()=>t,getId:()=>e,getTasks:()=>s,createTask:(t,e)=>a.createTask(t,e),getTaskById:t=>a.getTaskById(t),updateTask:(t,e)=>a.updateTask(t,e),removeTask:t=>a.removeTask(t)}},C=(t,e=crypto.randomUUID().slice(0,8))=>{const s=[];return{getTitle:()=>t,getId:()=>e,getLists:()=>s,createList:(t,e)=>(s.push(E(t,e)),s[s.length-1]),getListById:t=>{const e=s.findIndex((e=>e.getId()===t));return s[e]}}},T=t=>{const e=localStorage.getItem(t);return JSON.parse(e)},N=(t,e)=>{e.map((e=>{const s=t.createList(e.title,e.id);r.publish("listReconstructed",s),S(s,e.tasks)}))},S=(t,e)=>{e.forEach((e=>{t.createTask(e.title,e.id);const s=t.updateTask(e.id,e);r.publish("taskReconstructed",{list:t,task:s})}))};r.subscribe("projectCreated",(function(t){console.log("Storing Project");const e=T("projects");console.log(e),e.push({title:t.getTitle(),id:t.getId(),lists:[]}),localStorage.setItem("projects",JSON.stringify(e))})),r.subscribe("listCreated",(function(t){const e=T("projects"),s=I();console.log(e[s]),e[s].lists.push({title:t.getTitle(),id:t.getId(),tasks:[]}),localStorage.setItem("projects",JSON.stringify(e))})),r.subscribe("taskCreated",(function(t){const{list:e,task:s}=t,a=T("projects"),n=I(),r=x(e.getId());a[n].lists[r].tasks.push(s),localStorage.setItem("projects",JSON.stringify(a))})),r.subscribe("currentProjectSet",(function(t){localStorage.setItem("currentProject",JSON.stringify(t))}));const I=()=>{const t=T("projects"),e=T("currentProject");return t.findIndex((t=>t.id===e.id))},x=t=>T("projects")[I()].lists.findIndex((e=>e.id===t)),j=(()=>{const t=document.querySelector("#list-input");return{init:()=>{const e=h.getCurrentProject();t.addEventListener("keydown",(t=>{((t,e)=>{if("Enter"===t.key){t.preventDefault();const s=t.target.value,a=e.createList(s);t.target.value="",r.publish("listCreated",a)}})(t,e)}))}}})();(()=>{if(!("projects"in localStorage))return console.log("Initialize projects array in storage"),localStorage.setItem("projects",JSON.stringify([])),void(()=>{console.log("Creating default project");const t=C("Default");h.setCurrentProject(t),r.publish("projectCreated",t),(t=>{const e=t.createList("Habits"),s=e.createTask("Create your first habit!");r.publish("listCreated",e),r.publish("taskCreated",{list:e,task:s})})(t)})();h.setCurrentProject((()=>{const t=(()=>{const t=localStorage.getItem("projects");return JSON.parse(t)})()[I()],e=C(t.title,t.id);return r.publish("projectReconstructed",e),N(e,t.lists),e})())})(),j.init()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LWxpc3QvLi9zcmMvbW9kdWxlcy9IZWxwZXJzL2N1c3RvbUVsZW1lbnRIZWxwZXIuanMiLCJ3ZWJwYWNrOi8vb3AtdG9kby1saXN0Ly4vc3JjL21vZHVsZXMvSGVscGVycy9mb3JtYXREYXRlSGVscGVyLmpzIiwid2VicGFjazovL29wLXRvZG8tbGlzdC8uL3NyYy9tb2R1bGVzL0Zvcm0vRm9ybVJlbmRlcmVyLmpzIiwid2VicGFjazovL29wLXRvZG8tbGlzdC8uL3NyYy9tb2R1bGVzL0Zvcm0vRm9ybUV2ZW50SGFuZGxlcnMuanMiLCJ3ZWJwYWNrOi8vb3AtdG9kby1saXN0Ly4vc3JjL21vZHVsZXMvVG9vbGJhci9Ub29sYmFyLmpzIiwid2VicGFjazovL29wLXRvZG8tbGlzdC8uL3NyYy9tb2R1bGVzL1Rvb2xiYXIvVG9vbGJhckV2ZW50SGFuZGxlci5qcyIsIndlYnBhY2s6Ly9vcC10b2RvLWxpc3QvLi9zcmMvbW9kdWxlcy9wdWJTdWIuanMiLCJ3ZWJwYWNrOi8vb3AtdG9kby1saXN0Ly4vc3JjL21vZHVsZXMvTGlzdC90YXNrL1Rhc2tSZW5kZXJlci5qcyIsIndlYnBhY2s6Ly9vcC10b2RvLWxpc3QvLi9zcmMvbW9kdWxlcy9FdmVudEhhbmRsZXIuanMiLCJ3ZWJwYWNrOi8vb3AtdG9kby1saXN0Ly4vc3JjL21vZHVsZXMvTGlzdC9MaXN0UmVuZGVyZXIuanMiLCJ3ZWJwYWNrOi8vb3AtdG9kby1saXN0Ly4vc3JjL21vZHVsZXMvc3RvcmUuanMiLCJ3ZWJwYWNrOi8vb3AtdG9kby1saXN0Ly4vc3JjL21vZHVsZXMvTGlzdC9MaXN0LmpzIiwid2VicGFjazovL29wLXRvZG8tbGlzdC8uL3NyYy9tb2R1bGVzL0xpc3QvdGFzay9UYXNrTWFuYWdlci5qcyIsIndlYnBhY2s6Ly9vcC10b2RvLWxpc3QvLi9zcmMvbW9kdWxlcy9Qcm9qZWN0LmpzIiwid2VicGFjazovL29wLXRvZG8tbGlzdC8uL3NyYy9tb2R1bGVzL2xvY2FsU3RvcmFnZUhlbHBlci5qcyIsIndlYnBhY2s6Ly9vcC10b2RvLWxpc3QvLi9zcmMvbW9kdWxlcy9Vc2VySW50ZXJmYWNlLmpzIiwid2VicGFjazovL29wLXRvZG8tbGlzdC8uL3NyYy9tb2R1bGVzL1Byb2plY3RIYW5kbGVyLmpzIiwid2VicGFjazovL29wLXRvZG8tbGlzdC8uL3NyYy9tb2R1bGVzL0xpc3QvTGlzdEhhbmRsZXIuanMiLCJ3ZWJwYWNrOi8vb3AtdG9kby1saXN0Ly4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGN1c3RvbUVsZW1lbnRIZWxwZXIgPSAoKSA9PiB7XHJcbiAgLy8gUGFzcyBpbiBhIG9iamVjdCBvZiB7IFt0YXJnZXRdLiwgdGFnTmFtZSwgY2xhc3NMaXN0LCB0ZXh0Q29udGVudCwgYXR0cmlidXRlcyB9XHJcbiAgZnVuY3Rpb24gYXBwZW5kQ3VzdG9tRWxlbWVudChvcHRpb25zKSB7XHJcbiAgICBjb25zdCB7IHRhcmdldCB9ID0gb3B0aW9ucztcclxuICAgIGNvbnN0IHRhcmdldEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7XHJcblxyXG4gICAgY29uc3QgZWxlbWVudCA9IGNyZWF0ZUN1c3RvbUVsZW1lbnQob3B0aW9ucyk7XHJcbiAgICB0YXJnZXRFbGVtZW50LmFwcGVuZENoaWxkKGVsZW1lbnQpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gY3JlYXRlQ3VzdG9tRWxlbWVudChvcHRpb25zKSB7XHJcbiAgICBjb25zdCB7IHRhZ05hbWUsIGNsYXNzTGlzdCwgdGV4dENvbnRlbnQsIGF0dHJpYnV0ZXMgfSA9IG9wdGlvbnM7XHJcbiAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWdOYW1lKTtcclxuXHJcbiAgICBpZiAodHlwZW9mIGNsYXNzTGlzdCA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoY2xhc3NMaXN0KTtcclxuICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShjbGFzc0xpc3QpKSB7XHJcbiAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZCguLi5jbGFzc0xpc3QpO1xyXG4gICAgfVxyXG4gICAgaWYgKHRleHRDb250ZW50KSB7XHJcbiAgICAgIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0Q29udGVudDtcclxuICAgIH1cclxuICAgIGlmIChBcnJheS5pc0FycmF5KGF0dHJpYnV0ZXMpKSB7XHJcbiAgICAgIGNvbnN0IFthdHRyLCB2YWx1ZV0gPSBhdHRyaWJ1dGVzO1xyXG4gICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShhdHRyLCB2YWx1ZSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZWxlbWVudDtcclxuICB9XHJcbiAgcmV0dXJuIHsgYXBwZW5kQ3VzdG9tRWxlbWVudCwgY3JlYXRlQ3VzdG9tRWxlbWVudCB9O1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IHsgYXBwZW5kQ3VzdG9tRWxlbWVudCwgY3JlYXRlQ3VzdG9tRWxlbWVudCB9ID1cclxuICBjdXN0b21FbGVtZW50SGVscGVyKCk7XHJcbiIsImNvbnN0IGZvcm1hdERhdGUgPSAoZGF0ZVN0cmluZykgPT4ge1xyXG4gIGlmICghZGF0ZVN0cmluZykge1xyXG4gICAgcmV0dXJuIFwiXCI7XHJcbiAgfVxyXG4gIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZShkYXRlU3RyaW5nKTtcclxuICBkYXRlLnNldEhvdXJzKDI0LCAwLCAwLCAwKTtcclxuXHJcbiAgY29uc3QgZm9ybWF0dGVkRGF0ZSA9IGRhdGUudG9Mb2NhbGVEYXRlU3RyaW5nKFwiZW4tVVNcIiwge1xyXG4gICAgbW9udGg6IFwiMi1kaWdpdFwiLFxyXG4gICAgZGF5OiBcIjItZGlnaXRcIixcclxuICAgIHllYXI6IFwiMi1kaWdpdFwiLFxyXG4gIH0pO1xyXG5cclxuICByZXR1cm4gZm9ybWF0dGVkRGF0ZTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZvcm1hdERhdGU7XHJcbiIsImltcG9ydCB7IGNyZWF0ZUN1c3RvbUVsZW1lbnQgfSBmcm9tIFwiLi4vSGVscGVycy9jdXN0b21FbGVtZW50SGVscGVyLmpzXCI7XHJcbmltcG9ydCB7IHN1Ym1pdEZvcm0sIGNhbmNlbEZvcm0gfSBmcm9tIFwiLi9Gb3JtRXZlbnRIYW5kbGVycy5qc1wiO1xyXG5cclxuY29uc3QgRm9ybVJlbmRlcmVyID0gKGN1cnJlbnRMaXN0LCB0YXNrSWQpID0+IHtcclxuICBjb25zdCBhcHBlbmRFZGl0VGFza0Zvcm0gPSAodGFyZ2V0KSA9PiB7XHJcbiAgICBjb25zdCBlZGl0Rm9ybSA9IF9fY3JlYXRlRWRpdFRhc2tGb3JtKCk7XHJcbiAgICB0YXJnZXQuYXBwZW5kKGVkaXRGb3JtKTtcclxuICAgIHJldHVybiBlZGl0Rm9ybTtcclxuICB9O1xyXG5cclxuICBjb25zdCBfX2NyZWF0ZUVkaXRUYXNrRm9ybSA9ICgpID0+IHtcclxuICAgIGNvbnN0IGZvcm0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZm9ybVwiKTtcclxuICAgIGNvbnN0IHRhc2sgPSBjdXJyZW50TGlzdC5nZXRUYXNrQnlJZCh0YXNrSWQpO1xyXG4gICAgZm9ybS5pZCA9IFwiZWRpdC10YXNrXCI7XHJcbiAgICBmb3JtLmFwcGVuZChfX2NyZWF0ZUZvcm1FbGVtZW50cyh0YXNrKSk7XHJcblxyXG4gICAgZm9ybS5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIChlKSA9PiB7XHJcbiAgICAgIHN1Ym1pdEZvcm0oZSwgY3VycmVudExpc3QsIHRhc2spO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gZm9ybTtcclxuICB9O1xyXG5cclxuICBjb25zdCBfX2NyZWF0ZUZvcm1FbGVtZW50cyA9ICh0YXNrKSA9PiB7XHJcbiAgICAvLyBUaXRsZVxyXG4gICAgY29uc3QgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XHJcblxyXG4gICAgY29uc3QgdGl0bGUgPSBjcmVhdGVDdXN0b21FbGVtZW50KHtcclxuICAgICAgdGFnTmFtZTogXCJ0ZXh0YXJlYVwiLFxyXG4gICAgICBjbGFzc0xpc3Q6IFwiZWRpdC10aXRsZVwiLFxyXG4gICAgfSk7XHJcbiAgICB0aXRsZS52YWx1ZSA9IHRhc2sudGl0bGU7XHJcbiAgICB0aXRsZS5uYW1lID0gXCJ0aXRsZVwiO1xyXG5cclxuICAgIC8vRGVzY3JpcHRpb25cclxuICAgIGNvbnN0IGRlc2NyaXB0aW9uID0gY3JlYXRlQ3VzdG9tRWxlbWVudCh7XHJcbiAgICAgIHRhZ05hbWU6IFwidGV4dGFyZWFcIixcclxuICAgICAgY2xhc3NMaXN0OiBcImVkaXQtZGVzY3JpcHRpb25cIixcclxuICAgICAgYXR0cmlidXRlczogW1wicGxhY2Vob2xkZXJcIiwgXCJBZGQgYSBkZXNjcmlwdGlvblwiXSxcclxuICAgIH0pO1xyXG4gICAgZGVzY3JpcHRpb24udmFsdWUgPSB0YXNrLmRlc2NyaXB0aW9uIHx8IFwiXCI7XHJcbiAgICBkZXNjcmlwdGlvbi5uYW1lID0gXCJkZXNjcmlwdGlvblwiO1xyXG5cclxuICAgIC8vIER1ZSBEYXRlXHJcbiAgICBjb25zdCBkdWVEYXRlID0gY3JlYXRlQ3VzdG9tRWxlbWVudCh7XHJcbiAgICAgIHRhZ05hbWU6IFwiaW5wdXRcIixcclxuICAgICAgYXR0cmlidXRlczogW1widHlwZVwiLCBcImRhdGVcIl0sXHJcbiAgICAgIGNsYXNzTGlzdDogXCJlZGl0LWRhdGVcIixcclxuICAgIH0pO1xyXG4gICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKCk7XHJcbiAgICB0YXNrLmR1ZURhdGVcclxuICAgICAgPyAoZHVlRGF0ZS52YWx1ZSA9IHRhc2suZHVlRGF0ZSlcclxuICAgICAgOiAoZHVlRGF0ZS52YWx1ZUFzRGF0ZSA9IG5ldyBEYXRlKFxyXG4gICAgICAgICAgZGF0ZS5nZXRGdWxsWWVhcigpLFxyXG4gICAgICAgICAgZGF0ZS5nZXRNb250aCgpLFxyXG4gICAgICAgICAgZGF0ZS5nZXREYXRlKCksXHJcbiAgICAgICAgICAxMlxyXG4gICAgICAgICkpO1xyXG4gICAgZHVlRGF0ZS5uYW1lID0gXCJkdWVEYXRlXCI7XHJcblxyXG4gICAgLy8gRGlmZmljdWx0eVxyXG4gICAgY29uc3QgZGlmZmljdWx0eSA9IGNyZWF0ZUN1c3RvbUVsZW1lbnQoe1xyXG4gICAgICB0YWdOYW1lOiBcInNlbGVjdFwiLFxyXG4gICAgICBjbGFzc0xpc3Q6IFwiZWRpdC1kaWZmaWN1bHR5XCIsXHJcbiAgICB9KTtcclxuICAgIGRpZmZpY3VsdHkudmFsdWUgPSB0YXNrLmRpZmZpY3VsdHk7XHJcbiAgICBkaWZmaWN1bHR5Lm5hbWUgPSBcImRpZmZpY3VsdHlcIjtcclxuICAgIGNvbnN0IGRpZmZpY3VsdHlPcHRpb25zID0gW1wiXCIsIFwiRWFzeVwiLCBcIk1lZGl1bVwiLCBcIkhhcmRcIl07XHJcblxyXG4gICAgLy8gRGlmZmljdWx0eSBPcHRpb25zXHJcbiAgICBjb25zdCBvcHRpb25FbGVtZW50cyA9IGRpZmZpY3VsdHlPcHRpb25zLm1hcCgob3B0aW9uKSA9PiB7XHJcbiAgICAgIHJldHVybiBjcmVhdGVDdXN0b21FbGVtZW50KHtcclxuICAgICAgICB0YWdOYW1lOiBcIm9wdGlvblwiLFxyXG4gICAgICAgIHRleHRDb250ZW50OiBvcHRpb24sXHJcbiAgICAgICAgYXR0cmlidXRlczogW1widmFsdWVcIiwgYCR7b3B0aW9ufWBdLFxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgZGlmZmljdWx0eS5hcHBlbmQoLi4ub3B0aW9uRWxlbWVudHMpO1xyXG5cclxuICAgIC8vIEZvcm0gQnV0dG9uc1xyXG4gICAgY29uc3QgZm9ybUJ1dHRvbnMgPSBfX2NyZWF0ZUZvcm1CdXR0b25zKHRhc2spO1xyXG4gICAgZnJhZ21lbnQuYXBwZW5kKHRpdGxlLCBkZXNjcmlwdGlvbiwgZHVlRGF0ZSwgZGlmZmljdWx0eSwgZm9ybUJ1dHRvbnMpO1xyXG5cclxuICAgIHJldHVybiBmcmFnbWVudDtcclxuICB9O1xyXG5cclxuICBjb25zdCBfX2NyZWF0ZUZvcm1CdXR0b25zID0gKCkgPT4ge1xyXG4gICAgY29uc3QgZGl2ID0gY3JlYXRlQ3VzdG9tRWxlbWVudCh7XHJcbiAgICAgIHRhZ05hbWU6IFwiZGl2XCIsXHJcbiAgICAgIGNsYXNzTGlzdDogXCJmb3JtLWNvbnRyb2xzXCIsXHJcbiAgICB9KTtcclxuICAgIGNvbnN0IHN1Ym1pdEJ0biA9IGNyZWF0ZUN1c3RvbUVsZW1lbnQoe1xyXG4gICAgICB0YWdOYW1lOiBcImJ1dHRvblwiLFxyXG4gICAgICBjbGFzc0xpc3Q6IFwic3VibWl0LWJ0blwiLFxyXG4gICAgICB0ZXh0Q29udGVudDogXCJTdWJtaXRcIixcclxuICAgIH0pO1xyXG5cclxuICAgIGNvbnN0IGNhbmNlbEJ0biA9IGNyZWF0ZUN1c3RvbUVsZW1lbnQoe1xyXG4gICAgICB0YWdOYW1lOiBcImJ1dHRvblwiLFxyXG4gICAgICBjbGFzc0xpc3Q6IFwiY2FuY2VsLWJ0blwiLFxyXG4gICAgICB0ZXh0Q29udGVudDogXCJDYW5jZWxcIixcclxuICAgIH0pO1xyXG4gICAgY2FuY2VsQnRuLm9uY2xpY2sgPSAoZSkgPT4gY2FuY2VsRm9ybShlLCBjdXJyZW50TGlzdC5nZXRUYXNrQnlJZCh0YXNrSWQpKTtcclxuXHJcbiAgICBkaXYuYXBwZW5kKGNhbmNlbEJ0biwgc3VibWl0QnRuKTtcclxuICAgIHJldHVybiBkaXY7XHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIHsgYXBwZW5kRWRpdFRhc2tGb3JtIH07XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBGb3JtUmVuZGVyZXI7XHJcbiIsImltcG9ydCB7XHJcbiAgY3JlYXRlTWFpbkRldGFpbHNFbGVtZW50cyxcclxuICBjcmVhdGVCb3R0b21QYW5lbEVsZW1lbnRzLFxyXG59IGZyb20gXCIuLi9MaXN0L3Rhc2svVGFza1JlbmRlcmVyXCI7XHJcblxyXG5jb25zdCBzdWJtaXRGb3JtID0gKGUsIGxpc3QsIHRhc2spID0+IHtcclxuICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gIGNvbnN0IGZvcm0gPSBlLnRhcmdldDtcclxuICBjb25zdCB0YXNrQ29udGFpbmVyID0gZm9ybS5wYXJlbnROb2RlO1xyXG4gIGNvbnN0IG1haW5EZXRhaWxzID0gdGFza0NvbnRhaW5lci5xdWVyeVNlbGVjdG9yKFwiLm1haW4tZGV0YWlsc1wiKTtcclxuICBjb25zdCBib3R0b21QYW5lbCA9IHRhc2tDb250YWluZXIucXVlcnlTZWxlY3RvcihcIi5ib3R0b20tcGFuZWxcIik7XHJcblxyXG4gIGNvbnN0IGRhdGEgPSBuZXcgRm9ybURhdGEoZm9ybSk7XHJcbiAgY29uc3Qgb2JqID0ge307XHJcbiAgZm9yIChjb25zdCBbbmFtZSwgdmFsdWVdIG9mIGRhdGEpIHtcclxuICAgIG9ialtuYW1lXSA9IHZhbHVlO1xyXG4gIH1cclxuICBjb25zdCB1cGRhdGVkVGFzayA9IGxpc3QudXBkYXRlVGFzayh0YXNrLmlkLCBvYmopO1xyXG5cclxuICBmb3JtLnJlbW92ZSgpO1xyXG4gIGNvbnN0IG1haW5EZXRhaWxzRWxlbWVudHMgPSBjcmVhdGVNYWluRGV0YWlsc0VsZW1lbnRzKHVwZGF0ZWRUYXNrKTtcclxuICBtYWluRGV0YWlscy5hcHBlbmQobWFpbkRldGFpbHNFbGVtZW50cyk7XHJcblxyXG4gIGJvdHRvbVBhbmVsLnJlcGxhY2VDaGlsZHJlbigpO1xyXG4gIGNvbnN0IGJvdHRvbVBhbmVsRWxlbWVudHMgPSBjcmVhdGVCb3R0b21QYW5lbEVsZW1lbnRzKHVwZGF0ZWRUYXNrKTtcclxuICBib3R0b21QYW5lbC5hcHBlbmQoYm90dG9tUGFuZWxFbGVtZW50cyk7XHJcblxyXG4gIHRhc2tDb250YWluZXIuY2xhc3NMaXN0LnJlbW92ZShcImlzRWRpdGFibGVcIik7XHJcbn07XHJcblxyXG5jb25zdCBjYW5jZWxGb3JtID0gKGUsIHRhc2spID0+IHtcclxuICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gIGNvbnN0IGZvcm0gPSBlLnRhcmdldC5jbG9zZXN0KFwiZm9ybVwiKTtcclxuICBjb25zdCB0YXNrQ29udGFpbmVyID0gZm9ybS5wYXJlbnROb2RlO1xyXG4gIGNvbnN0IG1haW5EZXRhaWxzID0gdGFza0NvbnRhaW5lci5xdWVyeVNlbGVjdG9yKFwiLm1haW4tZGV0YWlsc1wiKTtcclxuXHJcbiAgZm9ybS5yZW1vdmUoKTtcclxuICB0YXNrQ29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUoXCJpc0VkaXRhYmxlXCIpO1xyXG5cclxuICBjb25zdCBtYWluRGV0YWlsc0VsZW1lbnRzID0gY3JlYXRlTWFpbkRldGFpbHNFbGVtZW50cyh0YXNrKTtcclxuICBtYWluRGV0YWlscy5hcHBlbmQobWFpbkRldGFpbHNFbGVtZW50cyk7XHJcbn07XHJcblxyXG5leHBvcnQgeyBzdWJtaXRGb3JtLCBjYW5jZWxGb3JtIH07XHJcbiIsImltcG9ydCB7IGNyZWF0ZUN1c3RvbUVsZW1lbnQgfSBmcm9tIFwiLi4vSGVscGVycy9jdXN0b21FbGVtZW50SGVscGVyLmpzXCI7XHJcbmltcG9ydCBUb29sYmFyRXZlbnRIYW5kbGVyIGZyb20gXCIuL1Rvb2xiYXJFdmVudEhhbmRsZXIuanNcIjtcclxuXHJcbi8vIENyZWF0ZSB0b29sYmFyIHdpbGwgcmV0dXJuIGEgZnJhZ21lbnQgY29udGFpbmVyIG9mIHRocmVlIGJ1dHRvbnNcclxuLy9cclxuXHJcbmNvbnN0IFRvb2xiYXIgPSAoY3VycmVudExpc3QsIHRhc2spID0+IHtcclxuICBjb25zdCBldmVudEhhbmRsZXIgPSBUb29sYmFyRXZlbnRIYW5kbGVyKGN1cnJlbnRMaXN0LCB0YXNrKTtcclxuXHJcbiAgY29uc3QgdG9vbHMgPSBbXHJcbiAgICB7XHJcbiAgICAgIG5hbWU6IFwiRWRpdFwiLFxyXG4gICAgICBpbWdTcmM6IFwiLi4vc3JjL2ltZ3Mvbm91bi1xdWlsbC00NjI2NzE4LnN2Z1wiLFxyXG4gICAgICBjbGFzc05hbWU6IFwiZmlsdGVyLWdyYXlcIixcclxuICAgICAgb25DbGljazogKGUpID0+IGV2ZW50SGFuZGxlci5zZXRFZGl0TW9kZShlKSxcclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgIG5hbWU6IFwiU2V0IFByaW9yaXR5XCIsXHJcbiAgICAgIGltZ1NyYzogXCIuLi9zcmMvaW1ncy9ub3VuLXN0YXItNDQ4NTc0Ni5zdmdcIixcclxuICAgICAgY2xhc3NOYW1lOiBcImZpbHRlci1ncmF5XCIsXHJcbiAgICAgIG9uQ2xpY2s6IChlKSA9PiBldmVudEhhbmRsZXIuc2V0UHJpb3JpdHkoZSksXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICBuYW1lOiBcIkRlbGV0ZVwiLFxyXG4gICAgICBpbWdTcmM6IFwiLi4vc3JjL2ltZ3Mvbm91bi1za3VsbC00NDg1Njc0LnN2Z1wiLFxyXG4gICAgICBjbGFzc05hbWU6IFwiZmlsdGVyLXJlZFwiLFxyXG4gICAgICBvbkNsaWNrOiAoZSkgPT4gZXZlbnRIYW5kbGVyLmRlbGV0ZVRhc2soZSksXHJcbiAgICB9LFxyXG4gIF07XHJcblxyXG4gIGNvbnN0IGNyZWF0ZVRvb2xiYXIgPSAoKSA9PiB7XHJcbiAgICBjb25zdCB0b29sYmFyQ29udGFpbmVyID0gY3JlYXRlQ3VzdG9tRWxlbWVudCh7XHJcbiAgICAgIHRhZ05hbWU6IFwiZGl2XCIsXHJcbiAgICAgIGNsYXNzTGlzdDogXCJ0b29sYmFyXCIsXHJcbiAgICB9KTtcclxuICAgIHRvb2xiYXJDb250YWluZXIuYXBwZW5kKF9fY3JlYXRlQnRucyh0b29scykpO1xyXG4gICAgcmV0dXJuIHRvb2xiYXJDb250YWluZXI7XHJcbiAgfTtcclxuICBjb25zdCBfX2NyZWF0ZUJ0bnMgPSAodG9vbHMpID0+IHtcclxuICAgIGNvbnN0IGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xyXG4gICAgdG9vbHMuZm9yRWFjaCgodG9vbCkgPT4ge1xyXG4gICAgICBjb25zdCB7IG5hbWUsIGltZ1NyYywgY2xhc3NOYW1lLCBvbkNsaWNrIH0gPSB0b29sO1xyXG4gICAgICAvLyBUb29sYmFyIHdpbGwgY29uc2lzdCBvZjpcclxuICAgICAgLy8gRWRpdFxyXG4gICAgICAvLyBTZXQgUHJpb3JpdHkgLSBpc1ByaW9yaXR5XHJcbiAgICAgIC8vIERlbGV0ZVxyXG4gICAgICBjb25zdCBidG4gPSBjcmVhdGVDdXN0b21FbGVtZW50KHtcclxuICAgICAgICB0YWdOYW1lOiBcImJ1dHRvblwiLFxyXG4gICAgICAgIGF0dHJpYnV0ZXM6IFtcImFyaWEtbGFiZWxcIiwgYCR7bmFtZX1gXSxcclxuICAgICAgfSk7XHJcbiAgICAgIGNvbnN0IGltZyA9IGNyZWF0ZUN1c3RvbUVsZW1lbnQoe1xyXG4gICAgICAgIHRhZ05hbWU6IFwiaW1nXCIsXHJcbiAgICAgICAgYXR0cmlidXRlczogW1wic3JjXCIsIGAke2ltZ1NyY31gXSxcclxuICAgICAgICBjbGFzc0xpc3Q6IGNsYXNzTmFtZSxcclxuICAgICAgfSk7XHJcbiAgICAgIGJ0bi5vbmNsaWNrID0gb25DbGljaztcclxuICAgICAgYnRuLmFwcGVuZChpbWcpO1xyXG4gICAgICBmcmFnbWVudC5hcHBlbmQoYnRuKTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIGZyYWdtZW50O1xyXG4gIH07XHJcblxyXG4gIHJldHVybiB7IGNyZWF0ZVRvb2xiYXIgfTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFRvb2xiYXI7XHJcbiIsImltcG9ydCBGb3JtUmVuZGVyZXIgZnJvbSBcIi4uL0Zvcm0vRm9ybVJlbmRlcmVyXCI7XHJcblxyXG5jb25zdCBUb29sYmFyRXZlbnRIYW5kbGVyID0gKGN1cnJlbnRMaXN0LCB0YXNrKSA9PiB7XHJcbiAgY29uc3Qgc2V0RWRpdE1vZGUgPSAoZSkgPT4ge1xyXG4gICAgY29uc3QgdGFza0VsZW1lbnQgPSBlLnRhcmdldC5jbG9zZXN0KFwiLnRhc2tcIik7XHJcbiAgICAvLyBFc2NhcGUgaWYgYWxyZWFkeSBpbiBlZGl0IG1vZGVcclxuICAgIGlmICh0YXNrRWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoXCJpc0VkaXRhYmxlXCIpKSByZXR1cm47XHJcbiAgICBjb25zdCBtYWluRGV0YWlscyA9IHRhc2tFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubWFpbi1kZXRhaWxzXCIpO1xyXG4gICAgdGFza0VsZW1lbnQuY2xhc3NMaXN0LmFkZChcImlzRWRpdGFibGVcIik7XHJcblxyXG4gICAgLy8gQ2xlYXIgYWxsIGNoaWxkcmVuIGluIG1haW4gZGV0YWlsc1xyXG4gICAgbWFpbkRldGFpbHMucmVwbGFjZUNoaWxkcmVuKCk7XHJcblxyXG4gICAgaWYgKHRhc2tFbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhcImV4cGFuZGVkXCIpKSB7XHJcbiAgICAgIHRhc2tFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZXhwYW5kZWQtZGV0YWlsc1wiKS5yZW1vdmUoKTtcclxuICAgICAgdGFza0VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcImV4cGFuZGVkXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGZvcm1SZW5kZXJlciA9IEZvcm1SZW5kZXJlcihjdXJyZW50TGlzdCwgdGFzay5pZCk7XHJcbiAgICBjb25zdCBlZGl0Rm9ybSA9IGZvcm1SZW5kZXJlci5hcHBlbmRFZGl0VGFza0Zvcm0odGFza0VsZW1lbnQpO1xyXG4gICAgY29uc3QgdGV4dGFyZWFzID0gZWRpdEZvcm0uZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJ0ZXh0YXJlYVwiKTtcclxuXHJcbiAgICBbLi4udGV4dGFyZWFzXS5mb3JFYWNoKCh0ZXh0YXJlYSkgPT4ge1xyXG4gICAgICB0ZXh0YXJlYS5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCAoZSkgPT4ge1xyXG4gICAgICAgIGlmIChlLmtleSA9PT0gXCJFbnRlclwiICYmICFlLnNoaWZ0S2V5KSB7XHJcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAvLyBQcm9ncmFtYXRpY2FsbHkgdHJpZ2dlciBmb3JtIHN1Ym1pc3Npb25cclxuICAgICAgICAgIGNvbnN0IHN1Ym1pdEV2ZW50ID0gbmV3IEV2ZW50KFwic3VibWl0XCIsIHtcclxuICAgICAgICAgICAgYnViYmxlczogdHJ1ZSxcclxuICAgICAgICAgICAgY2FuY2VsYWJsZTogdHJ1ZSxcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgZWRpdEZvcm0uZGlzcGF0Y2hFdmVudChzdWJtaXRFdmVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgLy8gZWRpdEZvcm1cclxuICAgIC8vICAgLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwidGV4dGFyZWFcIilcclxuICAgIC8vICAgLmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIHN1Ym1pdEZvcm0pO1xyXG4gIH07XHJcblxyXG4gIGNvbnN0IHNldFByaW9yaXR5ID0gKGUpID0+IHtcclxuICAgIGNvbnN0IGN1cnJlbnRUYXNrID0gY3VycmVudExpc3QuZ2V0VGFza0J5SWQodGFzay5pZCk7XHJcbiAgICBpZiAoY3VycmVudFRhc2sucHJpb3JpdHkpIHtcclxuICAgICAgY3VycmVudExpc3QudXBkYXRlVGFzayh0YXNrLmlkLCB7IHByaW9yaXR5OiBmYWxzZSB9KTtcclxuICAgICAgZS50YXJnZXQuY2xvc2VzdChcImltZ1wiKS5zcmMgPSBcIi4uL3NyYy9pbWdzL25vdW4tc3Rhci00NDg1NzQ2LnN2Z1wiO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY3VycmVudExpc3QudXBkYXRlVGFzayh0YXNrLmlkLCB7IHByaW9yaXR5OiB0cnVlIH0pO1xyXG4gICAgICBlLnRhcmdldC5jbG9zZXN0KFwiaW1nXCIpLnNyYyA9IFwiLi4vc3JjL2ltZ3Mvbm91bi1zdGFyLTQ0ODU4Mjcuc3ZnXCI7XHJcbiAgICB9XHJcbiAgICBlLnRhcmdldC5jbG9zZXN0KFwiLnRhc2tcIikuY2xhc3NMaXN0LnRvZ2dsZShcImlzUHJpb3JpdHlcIik7XHJcbiAgICBlLnRhcmdldC5jbG9zZXN0KFwiaW1nXCIpLmNsYXNzTGlzdC50b2dnbGUoXCJmaWx0ZXItZ3JheVwiKTtcclxuICAgIGUudGFyZ2V0LmNsb3Nlc3QoXCJpbWdcIikuY2xhc3NMaXN0LnRvZ2dsZShcImZpbHRlci15ZWxsb3dcIik7XHJcbiAgfTtcclxuXHJcbiAgY29uc3QgZGVsZXRlVGFzayA9IChlKSA9PiB7XHJcbiAgICBjdXJyZW50TGlzdC5yZW1vdmVUYXNrKHRhc2suaWQpO1xyXG4gICAgZS50YXJnZXQuY2xvc2VzdChcIi50YXNrXCIpLnJlbW92ZSgpO1xyXG4gIH07XHJcblxyXG4gIHJldHVybiB7IHNldEVkaXRNb2RlLCBzZXRQcmlvcml0eSwgZGVsZXRlVGFzayB9O1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgVG9vbGJhckV2ZW50SGFuZGxlcjtcclxuIiwiY29uc3QgcHViU3ViID0gKCgpID0+IHtcclxuICBjb25zdCBldmVudHMgPSB7fTtcclxuXHJcbiAgY29uc3QgZ2V0RXZlbnRzID0gKCkgPT4gZXZlbnRzO1xyXG5cclxuICBjb25zdCBzdWJzY3JpYmUgPSAoZXZlbnQsIGNhbGxiYWNrKSA9PiB7XHJcbiAgICBjb25zb2xlLmxvZyhgU3Vic2NyaWJpbmcgdG8gJHtldmVudH1gKTtcclxuICAgIGxldCBpbmRleDtcclxuXHJcbiAgICBpZiAoIWV2ZW50cy5oYXNPd25Qcm9wZXJ0eShldmVudCkpIHtcclxuICAgICAgZXZlbnRzW2V2ZW50XSA9IFtdO1xyXG4gICAgfVxyXG5cclxuICAgIGluZGV4ID0gZXZlbnRzW2V2ZW50XS5wdXNoKGNhbGxiYWNrKSAtIDE7XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgdW5zdWJzY3JpYmUoKSB7XHJcbiAgICAgICAgZXZlbnRzW2V2ZW50XS5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICB9LFxyXG4gICAgfTtcclxuICB9O1xyXG5cclxuICBjb25zdCBwdWJsaXNoID0gKGV2ZW50LCBkYXRhID0ge30pID0+IHtcclxuICAgIGNvbnNvbGUubG9nKGBFeGVjdXRpbmcgJHtldmVudH1gKTtcclxuICAgIGlmICghZXZlbnRzLmhhc093blByb3BlcnR5KGV2ZW50KSkge1xyXG4gICAgICByZXR1cm4gW107XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGV2ZW50c1tldmVudF0ubWFwKChjYWxsYmFjaykgPT4gY2FsbGJhY2soZGF0YSkpO1xyXG4gIH07XHJcblxyXG4gIHJldHVybiB7IGdldEV2ZW50cywgc3Vic2NyaWJlLCBwdWJsaXNoIH07XHJcbn0pKCk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBwdWJTdWI7XHJcbiIsImltcG9ydCB7IGVkaXRUYXNrLCB0b2dnbGVEZXRhaWxzIH0gZnJvbSBcIi4uLy4uL0V2ZW50SGFuZGxlci5qc1wiO1xyXG5pbXBvcnQgeyBjcmVhdGVDdXN0b21FbGVtZW50IH0gZnJvbSBcIi4uLy4uL0hlbHBlcnMvY3VzdG9tRWxlbWVudEhlbHBlci5qc1wiO1xyXG5pbXBvcnQgZm9ybWF0RGF0ZSBmcm9tIFwiLi4vLi4vSGVscGVycy9mb3JtYXREYXRlSGVscGVyLmpzXCI7XHJcbmltcG9ydCBUb29sYmFyIGZyb20gXCIuLi8uLi9Ub29sYmFyL1Rvb2xiYXIuanNcIjtcclxuaW1wb3J0IHB1YlN1YiBmcm9tIFwiLi4vLi4vcHViU3ViLmpzXCI7XHJcblxyXG5wdWJTdWIuc3Vic2NyaWJlKFwidGFza0NyZWF0ZWRcIiwgcmVuZGVyVGFzayk7XHJcbnB1YlN1Yi5zdWJzY3JpYmUoXCJ0YXNrUmVjb25zdHJ1Y3RlZFwiLCByZW5kZXJUYXNrKTtcclxuXHJcbmZ1bmN0aW9uIHJlbmRlclRhc2soZGF0YSkge1xyXG4gIGNvbnNvbGUubG9nKFwiUmVuZGVyaW5nIHRhc2tcIik7XHJcbiAgY29uc3QgeyBsaXN0LCB0YXNrIH0gPSBkYXRhO1xyXG4gIF9fYXBwZW5kVGFza0VsZW1lbnRzKGxpc3QsIHRhc2spO1xyXG59XHJcblxyXG5jb25zdCBfX2FwcGVuZFRhc2tFbGVtZW50cyA9IChsaXN0LCB0YXNrKSA9PiB7XHJcbiAgY29uc3QgbGlzdENvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYFtkYXRhLWlkPVwiJHtsaXN0LmdldElkKCl9XCJdYCk7XHJcbiAgY29uc3QgdGFza3NDb250YWluZXIgPSBsaXN0Q29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoXCIudGFza3MtY29udGFpbmVyXCIpO1xyXG5cclxuICBjb25zdCB0YXNrRWxlbWVudHMgPSBfX2NyZWF0ZVRhc2tFbGVtZW50cyhsaXN0LCB0YXNrKTtcclxuICB0YXNrc0NvbnRhaW5lci5wcmVwZW5kKHRhc2tFbGVtZW50cyk7XHJcbn07XHJcblxyXG5jb25zdCBfX2NyZWF0ZVRhc2tFbGVtZW50cyA9IChjdXJyZW50TGlzdCwgdGFzaykgPT4ge1xyXG4gIC8vIERpdiBjb250YWluZXJcclxuICBjb25zdCB0YXNrQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICB0YXNrQ29udGFpbmVyLmNsYXNzTmFtZSA9IFwidGFza1wiO1xyXG4gIHRhc2tDb250YWluZXIuZGF0YXNldC5pZCA9IHRhc2suaWQ7XHJcblxyXG4gIC8vIFRvb2xiYXJcclxuICBjb25zdCB0b29sYmFyQ3JlYXRvciA9IFRvb2xiYXIoY3VycmVudExpc3QsIHRhc2spO1xyXG4gIGNvbnN0IHRvb2xiYXIgPSB0b29sYmFyQ3JlYXRvci5jcmVhdGVUb29sYmFyKGN1cnJlbnRMaXN0LCB0YXNrQ29udGFpbmVyKTtcclxuXHJcbiAgLy8gTWFpbiBkZXRhaWxzXHJcbiAgY29uc3QgbWFpbkRldGFpbHMgPSBfX3JlbmRlck1haW5EZXRhaWxzKHRhc2spO1xyXG5cclxuICAvLyBCb3R0b20gUGFuZWxcclxuICBjb25zdCBib3R0b21QYW5lbCA9IF9fcmVuZGVyQm90dG9tUGFuZWwoY3VycmVudExpc3QsIHRhc2suaWQpO1xyXG5cclxuICB0YXNrQ29udGFpbmVyLmFwcGVuZCh0b29sYmFyKTtcclxuICB0YXNrQ29udGFpbmVyLmFwcGVuZChtYWluRGV0YWlscyk7XHJcbiAgdGFza0NvbnRhaW5lci5hcHBlbmQoYm90dG9tUGFuZWwpO1xyXG5cclxuICAvLyBBZGQgb25jbGljayB0byBjaGFuZ2UgZWxlbWVudCB0byBpbnB1dCBvbiBjbGlja1xyXG4gIHRhc2tDb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcihcImRibGNsaWNrXCIsIChlKSA9PiB7XHJcbiAgICBlZGl0VGFzayhlLCB0YXNrLmlkLCBjdXJyZW50TGlzdCk7XHJcbiAgfSk7XHJcblxyXG4gIHRhc2tDb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChlKSA9PiB7XHJcbiAgICB0b2dnbGVEZXRhaWxzKGUsIGN1cnJlbnRMaXN0LCB0YXNrLmlkKTtcclxuICB9KTtcclxuXHJcbiAgdGFza0NvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKFwibW91c2VvdmVyXCIsICgpID0+IHtcclxuICAgIHRvb2xiYXIuc3R5bGUub3BhY2l0eSA9IFwiMVwiO1xyXG4gICAgdG9vbGJhci5zdHlsZS52aXNpYmlsaXR5ID0gXCJ2aXNpYmxlXCI7XHJcbiAgfSk7XHJcblxyXG4gIHRhc2tDb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlb3V0XCIsICgpID0+IHtcclxuICAgIHRvb2xiYXIuc3R5bGUub3BhY2l0eSA9IFwiMFwiO1xyXG4gICAgdG9vbGJhci5zdHlsZS52aXNpYmlsaXR5ID0gXCJoaWRkZW5cIjtcclxuICB9KTtcclxuXHJcbiAgLy8gdG9vbGJhci5hZGRFdmVudExpc3RlbmVyKFwibW91c2VvdmVyXCIsIChlKSA9PiB7XHJcbiAgLy8gICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gIC8vICAgdG9vbGJhci5zdHlsZS5vcGFjaXR5ID0gXCIxXCI7XHJcbiAgLy8gICB0b29sYmFyLnN0eWxlLnZpc2liaWxpdHkgPSBcInZpc2libGVcIjtcclxuICAvLyB9KTtcclxuXHJcbiAgcmV0dXJuIHRhc2tDb250YWluZXI7XHJcbn07XHJcblxyXG5jb25zdCBfX3JlbmRlck1haW5EZXRhaWxzID0gKHRhc2spID0+IHtcclxuICBjb25zdCBtYWluRGV0YWlsc0NvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgbWFpbkRldGFpbHNDb250YWluZXIuY2xhc3NMaXN0LmFkZChcIm1haW4tZGV0YWlsc1wiKTtcclxuICBtYWluRGV0YWlsc0NvbnRhaW5lci5hcHBlbmRDaGlsZChjcmVhdGVNYWluRGV0YWlsc0VsZW1lbnRzKHRhc2spKTtcclxuICByZXR1cm4gbWFpbkRldGFpbHNDb250YWluZXI7XHJcbn07XHJcblxyXG5jb25zdCBjcmVhdGVNYWluRGV0YWlsc0VsZW1lbnRzID0gKHRhc2spID0+IHtcclxuICBjb25zdCBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcclxuXHJcbiAgY29uc3QgdGl0bGUgPSBjcmVhdGVDdXN0b21FbGVtZW50KHtcclxuICAgIHRhZ05hbWU6IFwicFwiLFxyXG4gICAgY2xhc3NMaXN0OiBcInRhc2stdGl0bGVcIixcclxuICAgIHRleHRDb250ZW50OiB0YXNrLnRpdGxlLFxyXG4gIH0pO1xyXG5cclxuICBjb25zdCBkZXNjcmlwdGlvbiA9IHRhc2suZGVzY3JpcHRpb25cclxuICAgID8gY3JlYXRlQ3VzdG9tRWxlbWVudCh7XHJcbiAgICAgICAgdGFnTmFtZTogXCJwXCIsXHJcbiAgICAgICAgY2xhc3NMaXN0OiBcInRhc2stZGVzY3JpcHRpb25cIixcclxuICAgICAgICB0ZXh0Q29udGVudDogdGFzay5kZXNjcmlwdGlvbixcclxuICAgICAgfSlcclxuICAgIDogXCIgXCI7XHJcblxyXG4gIGZyYWdtZW50LmFwcGVuZCh0aXRsZSwgZGVzY3JpcHRpb24pO1xyXG4gIHJldHVybiBmcmFnbWVudDtcclxufTtcclxuXHJcbmNvbnN0IHJlbmRlckV4cGFuZGVkVGFzayA9ICh0YXJnZXQsIHRhc2spID0+IHtcclxuICBjb25zdCBleHBhbmRlZFRhc2sgPSBfX2NyZWF0ZUV4cGFuZGVkVGFzayh0YXNrKTtcclxuICB0YXJnZXQuYWZ0ZXIoZXhwYW5kZWRUYXNrKTtcclxuICByZXR1cm4gZXhwYW5kZWRUYXNrO1xyXG59O1xyXG5cclxuY29uc3QgX19jcmVhdGVFeHBhbmRlZFRhc2sgPSAodGFzaykgPT4ge1xyXG4gIGNvbnN0IHsgZHVlRGF0ZSwgZGlmZmljdWx0eSB9ID0gdGFzaztcclxuICBjb25zdCBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcclxuICAvLyBBcHBlbmQgY2hpbGRyZW4gdG8gZnJhZ21lbnRcclxuICBjb25zdCBleHBhbmRlZERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgLy8gU2V0IHRvZ2dsZSBhdHRyaWJ1dGUgdG8gd29yayB3aXRoIHRvZ2dsZSBldmVudCBsaXN0ZW5lclxyXG4gIGV4cGFuZGVkRGl2LmNsYXNzTGlzdC5hZGQoXCJleHBhbmRlZC1kZXRhaWxzXCIpO1xyXG4gIGZyYWdtZW50LmFwcGVuZChleHBhbmRlZERpdik7XHJcblxyXG4gIC8vIGR1ZURhdGUgJiZcclxuICBleHBhbmRlZERpdi5hcHBlbmQoXHJcbiAgICBjcmVhdGVDdXN0b21FbGVtZW50KHtcclxuICAgICAgdGFnTmFtZTogXCJwXCIsXHJcbiAgICAgIGNsYXNzTGlzdDogXCJkdWUtZGF0ZVwiLFxyXG4gICAgICB0ZXh0Q29udGVudDogZm9ybWF0RGF0ZShkdWVEYXRlKSxcclxuICAgIH0pXHJcbiAgKTtcclxuICBjb25zb2xlLmxvZyhkdWVEYXRlKTtcclxuXHJcbiAgLy8gZGlmZmljdWx0eSAmJlxyXG4gIGV4cGFuZGVkRGl2LmFwcGVuZChcclxuICAgIGNyZWF0ZUN1c3RvbUVsZW1lbnQoe1xyXG4gICAgICB0YWdOYW1lOiBcInBcIixcclxuICAgICAgY2xhc3NMaXN0OiBcImRpZmZpY3VsdHlcIixcclxuICAgICAgdGV4dENvbnRlbnQ6IGRpZmZpY3VsdHksXHJcbiAgICB9KVxyXG4gICk7XHJcbiAgcmV0dXJuIGZyYWdtZW50O1xyXG59O1xyXG5cclxuY29uc3QgX19yZW5kZXJCb3R0b21QYW5lbCA9IChjdXJyZW50TGlzdCwgdGFza0lkKSA9PiB7XHJcbiAgY29uc3QgdGFzayA9IGN1cnJlbnRMaXN0LmdldFRhc2tCeUlkKHRhc2tJZCk7XHJcbiAgY29uc3QgYm90dG9tUGFuZWwgPSBjcmVhdGVDdXN0b21FbGVtZW50KHtcclxuICAgIHRhZ05hbWU6IFwiZGl2XCIsXHJcbiAgICBjbGFzc0xpc3Q6IFwiYm90dG9tLXBhbmVsXCIsXHJcbiAgfSk7XHJcbiAgYm90dG9tUGFuZWwuYXBwZW5kKGNyZWF0ZUJvdHRvbVBhbmVsRWxlbWVudHModGFzaykpO1xyXG4gIHJldHVybiBib3R0b21QYW5lbDtcclxufTtcclxuXHJcbmNvbnN0IGNyZWF0ZUJvdHRvbVBhbmVsRWxlbWVudHMgPSAodGFzaykgPT4ge1xyXG4gIGNvbnN0IGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xyXG5cclxuICBjb25zdCBnZXRUYXNrRGlmZmljdWx0eSA9IChkaWZmaWN1bHR5KSA9PiB7XHJcbiAgICBzd2l0Y2ggKGRpZmZpY3VsdHkpIHtcclxuICAgICAgY2FzZSBcIkVhc3lcIjpcclxuICAgICAgICByZXR1cm4gXCLimpTvuI9cIjtcclxuICAgICAgY2FzZSBcIk1lZGl1bVwiOlxyXG4gICAgICAgIHJldHVybiBcIuKalO+4j+KalO+4j1wiO1xyXG4gICAgICBjYXNlIFwiSGFyZFwiOlxyXG4gICAgICAgIHJldHVybiBcIuKalO+4j+KalO+4j+KalO+4j1wiO1xyXG4gICAgICBkZWZhdWx0OlxyXG4gICAgICAgIHJldHVybiBcIlwiO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIGNvbnN0IGRpZmZpY3VsdHlFbCA9IGNyZWF0ZUN1c3RvbUVsZW1lbnQoe1xyXG4gICAgdGFnTmFtZTogXCJwXCIsXHJcbiAgICB0ZXh0Q29udGVudDogZ2V0VGFza0RpZmZpY3VsdHkodGFzay5kaWZmaWN1bHR5KSxcclxuICB9KTtcclxuXHJcbiAgY29uc3QgZHVlRGF0ZUVsID0gY3JlYXRlQ3VzdG9tRWxlbWVudCh7XHJcbiAgICB0YWdOYW1lOiBcInBcIixcclxuICAgIHRleHRDb250ZW50OiBmb3JtYXREYXRlKHRhc2suZHVlRGF0ZSkgfHwgXCJcIixcclxuICB9KTtcclxuXHJcbiAgZnJhZ21lbnQuYXBwZW5kKGR1ZURhdGVFbCwgZGlmZmljdWx0eUVsKTtcclxuICByZXR1cm4gZnJhZ21lbnQ7XHJcbn07XHJcblxyXG5leHBvcnQge1xyXG4gIHJlbmRlckV4cGFuZGVkVGFzayxcclxuICBjcmVhdGVNYWluRGV0YWlsc0VsZW1lbnRzLFxyXG4gIGNyZWF0ZUJvdHRvbVBhbmVsRWxlbWVudHMsXHJcbn07XHJcbiIsImltcG9ydCB7IHJlbmRlckV4cGFuZGVkVGFzayB9IGZyb20gXCIuL0xpc3QvdGFzay9UYXNrUmVuZGVyZXIuanNcIjtcclxuaW1wb3J0IHB1YnN1YiBmcm9tIFwiLi9wdWJTdWIuanNcIjtcclxuXHJcbmNvbnN0IGNyZWF0ZUxpc3QgPSAoZSwgY3VycmVudFByb2plY3QpID0+IHtcclxuICBpZiAoZS5rZXkgPT09IFwiRW50ZXJcIikge1xyXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgY29uc3QgdGl0bGUgPSBlLnRhcmdldC52YWx1ZTtcclxuICAgIGNvbnN0IG5ld0xpc3QgPSBjdXJyZW50UHJvamVjdC5jcmVhdGVMaXN0KHRpdGxlKTtcclxuICAgIGUudGFyZ2V0LnZhbHVlID0gXCJcIjtcclxuXHJcbiAgICBwdWJzdWIucHVibGlzaChcImxpc3RDcmVhdGVkXCIsIG5ld0xpc3QpO1xyXG4gIH1cclxufTtcclxuXHJcbmNvbnN0IGNyZWF0ZVRhc2sgPSAoZSwgbGlzdCkgPT4ge1xyXG4gIGlmIChlLmtleSA9PT0gXCJFbnRlclwiKSB7XHJcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICBjb25zdCB0aXRsZSA9IGUudGFyZ2V0LnZhbHVlO1xyXG4gICAgY29uc3QgbmV3VGFzayA9IGxpc3QuY3JlYXRlVGFzayh0aXRsZSk7XHJcblxyXG4gICAgZS50YXJnZXQudmFsdWUgPSBcIlwiO1xyXG5cclxuICAgIHB1YnN1Yi5wdWJsaXNoKFwidGFza0NyZWF0ZWRcIiwgeyBsaXN0LCB0YXNrOiBuZXdUYXNrIH0pO1xyXG4gIH1cclxufTtcclxuXHJcbi8vIFJlZmFjdG9yIHRoaXMgbWVzcyBsYXRlclxyXG5mdW5jdGlvbiBhdXRvUmVzaXplKCkge1xyXG4gIHRoaXMuc3R5bGUuaGVpZ2h0ID0gXCJhdXRvXCI7XHJcbiAgdGhpcy5zdHlsZS5oZWlnaHQgPSB0aGlzLnNjcm9sbEhlaWdodCArIFwicHhcIjtcclxufVxyXG5cclxuY29uc3QgZWRpdFRhc2sgPSAoZSwgdGFza0lkLCBjdXJyZW50TGlzdCkgPT4ge1xyXG4gIGNvbnN0IGVsID0gZS50YXJnZXQ7XHJcbiAgaWYgKCFlbC5jbGFzc0xpc3QuY29udGFpbnMoXCJ0YXNrLXRpdGxlXCIpKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIGNvbnN0IHByZXZpb3VzID0gZWwuY2xvbmVOb2RlKHRydWUpO1xyXG4gIGNvbnN0IGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRleHRhcmVhXCIpO1xyXG4gIGNvbnN0IGN1cnJlbnRUYXNrID0gY3VycmVudExpc3QuZ2V0VGFza0J5SWQodGFza0lkKTtcclxuXHJcbiAgaW5wdXQuY2xhc3NMaXN0LmFkZChcInRlbXAtaW5wdXRcIik7XHJcbiAgaW5wdXQudmFsdWUgPSBjdXJyZW50VGFzay50aXRsZTtcclxuICAvLyBpbnB1dC5zdHlsZS53cmFwID0gXCJzb2Z0XCI7XHJcbiAgaW5wdXQuc3R5bGUud29yZEJyZWFrID0gXCJicmVhay13b3JkXCI7XHJcblxyXG4gIGVsLnJlcGxhY2VXaXRoKGlucHV0KTtcclxuICBpbnB1dC5zdHlsZS5oZWlnaHQgPSBcImF1dG9cIjtcclxuICBpbnB1dC5zdHlsZS5oZWlnaHQgPSBpbnB1dC5zY3JvbGxIZWlnaHQgKyBcInB4XCI7XHJcblxyXG4gIGNvbnN0IHNhdmUgPSAoKSA9PiB7XHJcbiAgICAvLyBTYXZlIHRoZSBpbnB1dCB2YWx1ZSBpbnRvIHRoZSBzZWxlY3RlZCB0YXNrXHJcbiAgICBjdXJyZW50TGlzdC51cGRhdGVUYXNrKHRhc2tJZCwgeyB0aXRsZTogaW5wdXQudmFsdWUgfSk7XHJcbiAgICBwcmV2aW91cy50ZXh0Q29udGVudCA9IGlucHV0LnZhbHVlO1xyXG4gICAgaW5wdXQucmVwbGFjZVdpdGgocHJldmlvdXMpO1xyXG4gIH07XHJcblxyXG4gIGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIChlKSA9PiB7XHJcbiAgICBpZiAoZS5rZXkgPT09IFwiRW50ZXJcIikge1xyXG4gICAgICBpbnB1dC5ibHVyKCk7XHJcbiAgICB9XHJcbiAgfSk7XHJcblxyXG4gIGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJibHVyXCIsIHNhdmUsIHtcclxuICAgIG9uY2U6IHRydWUsXHJcbiAgfSk7XHJcblxyXG4gIGlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJpbnB1dFwiLCBhdXRvUmVzaXplLCBmYWxzZSk7XHJcbiAgaW5wdXQuZm9jdXMoKTtcclxufTtcclxuXHJcbmNvbnN0IHRvZ2dsZURldGFpbHMgPSAoZSwgY3VycmVudExpc3QsIHRhc2tJZCkgPT4ge1xyXG4gIGlmIChcclxuICAgIGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcImlzRWRpdGFibGVcIikgfHxcclxuICAgICFlLnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoXCJ0YXNrXCIpXHJcbiAgKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICBjb25zdCB0YXNrQ29udGFpbmVyID0gZS50YXJnZXQ7XHJcbiAgY29uc3QgbWFpbkRldGFpbHMgPSB0YXNrQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoXCIubWFpbi1kZXRhaWxzXCIpO1xyXG5cclxuICBjb25zdCBleHBhbmRlZERldGFpbHMgPSB0YXNrQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoXCIuZXhwYW5kZWQtZGV0YWlsc1wiKTtcclxuICBpZiAodGFza0NvbnRhaW5lci5jbGFzc0xpc3QuY29udGFpbnMoXCJpc0VkaXRhYmxlXCIpKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICBpZiAoIWV4cGFuZGVkRGV0YWlscykge1xyXG4gICAgY29uc3QgdGFzayA9IGN1cnJlbnRMaXN0LmdldFRhc2tCeUlkKHRhc2tJZCk7XHJcbiAgICByZW5kZXJFeHBhbmRlZFRhc2sobWFpbkRldGFpbHMsIHRhc2spO1xyXG4gICAgdGFza0NvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwiZXhwYW5kZWRcIik7XHJcbiAgfSBlbHNlIHtcclxuICAgIGV4cGFuZGVkRGV0YWlscy5yZW1vdmUoKTtcclxuICAgIHRhc2tDb250YWluZXIuY2xhc3NMaXN0LnJlbW92ZShcImV4cGFuZGVkXCIpO1xyXG4gIH1cclxufTtcclxuXHJcbmV4cG9ydCB7IGNyZWF0ZUxpc3QsIGNyZWF0ZVRhc2ssIGVkaXRUYXNrLCB0b2dnbGVEZXRhaWxzIH07XHJcbiIsImltcG9ydCB7XHJcbiAgYXBwZW5kQ3VzdG9tRWxlbWVudCxcclxuICBjcmVhdGVDdXN0b21FbGVtZW50LFxyXG59IGZyb20gXCIuLi9IZWxwZXJzL2N1c3RvbUVsZW1lbnRIZWxwZXIuanNcIjtcclxuaW1wb3J0IHsgY3JlYXRlVGFzayB9IGZyb20gXCIuLi9FdmVudEhhbmRsZXIuanNcIjtcclxuaW1wb3J0IHB1YlN1YiBmcm9tIFwiLi4vcHViU3ViLmpzXCI7XHJcblxyXG5wdWJTdWIuc3Vic2NyaWJlKFwibGlzdENyZWF0ZWRcIiwgcmVuZGVyTGlzdCk7XHJcbnB1YlN1Yi5zdWJzY3JpYmUoXCJsaXN0UmVjb25zdHJ1Y3RlZFwiLCByZW5kZXJMaXN0KTtcclxuXHJcbmZ1bmN0aW9uIHJlbmRlckxpc3QobGlzdCkge1xyXG4gIGNvbnNvbGUubG9nKFwiUmVuZGVyaW5nIExpc3RcIik7XHJcbiAgLy8gTGlzdCBFbGVtZW50c1xyXG4gIF9fYXBwZW5kTGlzdENvbnRhaW5lcihsaXN0KTtcclxuICBfX2FwcGVuZExpc3RBbmRUaXRsZUVsZW1lbnRzKGxpc3QpO1xyXG5cclxuICAvLyBUYXNrIEVsZW1lbnRcclxuICBfX2FwcGVuZFRhc2tDb250YWluZXIobGlzdCk7XHJcbn1cclxuXHJcbmNvbnN0IF9fYXBwZW5kTGlzdENvbnRhaW5lciA9IChsaXN0KSA9PiB7XHJcbiAgYXBwZW5kQ3VzdG9tRWxlbWVudCh7XHJcbiAgICB0YXJnZXQ6IFwiLmxpc3RzLWNvbnRhaW5lclwiLFxyXG4gICAgdGFnTmFtZTogXCJkaXZcIixcclxuICAgIGNsYXNzTGlzdDogW1wibGlzdFwiXSxcclxuICAgIGF0dHJpYnV0ZXM6IFtcImRhdGEtaWRcIiwgbGlzdC5nZXRJZCgpXSxcclxuICB9KTtcclxufTtcclxuXHJcbmNvbnN0IF9fYXBwZW5kTGlzdEFuZFRpdGxlRWxlbWVudHMgPSAobGlzdCkgPT4ge1xyXG4gIGNvbnN0IGxpc3RFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgW2RhdGEtaWQ9XCIke2xpc3QuZ2V0SWQoKX1cIl1gKTtcclxuICBhcHBlbmRDdXN0b21FbGVtZW50KHtcclxuICAgIHRhcmdldDogYFtkYXRhLWlkPVwiJHtsaXN0LmdldElkKCl9XCJdYCxcclxuICAgIHRhZ05hbWU6IFwiaDJcIixcclxuICAgIHRleHRDb250ZW50OiBsaXN0LmdldFRpdGxlKCksXHJcbiAgfSk7XHJcbiAgbGlzdEVsZW1lbnQuYXBwZW5kQ2hpbGQoX19jcmVhdGVUYXNrRm9ybShsaXN0KSk7XHJcbn07XHJcblxyXG5jb25zdCBfX2NyZWF0ZVRhc2tGb3JtID0gKGxpc3QpID0+IHtcclxuICAvLyBDcmVhdGUgZm9ybSBhbmQgYXBwZW5kIGlucHV0IHRvIExpc3RcclxuICBjb25zdCB0YXNrRm9ybSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmb3JtXCIpO1xyXG4gIHRhc2tGb3JtLmNsYXNzTmFtZSA9IFwidGFzay1mb3JtXCI7XHJcbiAgY29uc3QgdGFza0lucHV0ID0gY3JlYXRlQ3VzdG9tRWxlbWVudCh7XHJcbiAgICB0YWdOYW1lOiBcImlucHV0XCIsXHJcbiAgICBjbGFzc0xpc3Q6IFwidGFzay1pbnB1dFwiLFxyXG4gICAgYXR0cmlidXRlczogW1wicGxhY2Vob2xkZXJcIiwgXCJBZGQgYSB0YXNrXCJdLFxyXG4gIH0pO1xyXG4gIHRhc2tGb3JtLmFwcGVuZENoaWxkKHRhc2tJbnB1dCk7XHJcblxyXG4gIC8vIEJpbmQgaW5wdXQgbGlzdGVuZXIgdG8gbW9uaXRvciBuZXcgdGFzayBlbnRyaWVzXHJcbiAgdGFza0lucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIChlKSA9PiB7XHJcbiAgICBjcmVhdGVUYXNrKGUsIGxpc3QpO1xyXG4gIH0pO1xyXG4gIHJldHVybiB0YXNrRm9ybTtcclxufTtcclxuXHJcbmNvbnN0IF9fYXBwZW5kVGFza0NvbnRhaW5lciA9IChsaXN0KSA9PiB7XHJcbiAgYXBwZW5kQ3VzdG9tRWxlbWVudCh7XHJcbiAgICB0YXJnZXQ6IGBbZGF0YS1pZD1cIiR7bGlzdC5nZXRJZCgpfVwiXWAsXHJcbiAgICB0YWdOYW1lOiBcImRpdlwiLFxyXG4gICAgY2xhc3NMaXN0OiBcInRhc2tzLWNvbnRhaW5lclwiLFxyXG4gIH0pO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgcmVuZGVyTGlzdDtcclxuIiwiaW1wb3J0IHB1YlN1YiBmcm9tIFwiLi9wdWJTdWJcIjtcclxuXHJcbmNvbnN0IHN0b3JlID0gKCgpID0+IHtcclxuICBjb25zdCBwcm9qZWN0cyA9IFtdO1xyXG4gIGxldCBjdXJyZW50UHJvamVjdCA9IG51bGw7XHJcbiAgLy8gUG9wdWxhdGUgcHJvamVjdHMgd2l0aCBhIGxpc3Qgb2YgYWxsIHRoZSBwcm9qZWN0IG5hbWVzIHdpdGhpbiBzdG9yYWdlICsgYWRkIGFueSBuZXdseSBjcmVhdGVkIHByb2plY3RzXHJcblxyXG4gIGNvbnN0IGdldEN1cnJlbnRQcm9qZWN0ID0gKCkgPT4gY3VycmVudFByb2plY3Q7XHJcblxyXG4gIGZ1bmN0aW9uIGFkZFByb2plY3QocHJvamVjdCkge1xyXG4gICAgaWYgKGN1cnJlbnRQcm9qZWN0ID09PSBudWxsKSB7XHJcbiAgICAgIHNldEN1cnJlbnRQcm9qZWN0KHByb2plY3QpO1xyXG4gICAgfVxyXG4gICAgcHJvamVjdHMucHVzaChwcm9qZWN0KTtcclxuICAgIHJldHVybiBwcm9qZWN0cztcclxuICB9XHJcblxyXG4gIGNvbnN0IHNldEN1cnJlbnRQcm9qZWN0ID0gKHByb2plY3QpID0+IHtcclxuICAgIGNvbnNvbGUubG9nKFwiU2V0dGluZyBjdXJyZW50IHByb2plY3Q6IFwiICsgcHJvamVjdC5nZXRUaXRsZSgpKTtcclxuICAgIGN1cnJlbnRQcm9qZWN0ID0gcHJvamVjdDtcclxuICAgIHB1YlN1Yi5wdWJsaXNoKFwiY3VycmVudFByb2plY3RTZXRcIiwge1xyXG4gICAgICB0aXRsZTogcHJvamVjdC5nZXRUaXRsZSgpLFxyXG4gICAgICBpZDogcHJvamVjdC5nZXRJZCgpLFxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gY3VycmVudFByb2plY3Q7XHJcbiAgfTtcclxuICByZXR1cm4geyBnZXRDdXJyZW50UHJvamVjdCwgc2V0Q3VycmVudFByb2plY3QgfTtcclxufSkoKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHN0b3JlO1xyXG4iLCJpbXBvcnQgVGFza01hbmFnZXIgZnJvbSBcIi4vdGFzay9UYXNrTWFuYWdlclwiO1xyXG5cclxuY29uc3QgTGlzdCA9ICh0aXRsZSwgaWQgPSBjcnlwdG8ucmFuZG9tVVVJRCgpLnNsaWNlKDAsIDgpKSA9PiB7XHJcbiAgY29uc3QgdGFza3MgPSBbXTtcclxuICBjb25zdCB0YXNrTWFuYWdlciA9IFRhc2tNYW5hZ2VyKHRhc2tzKTtcclxuXHJcbiAgY29uc3QgZ2V0VGl0bGUgPSAoKSA9PiB0aXRsZTtcclxuICBjb25zdCBnZXRJZCA9ICgpID0+IGlkO1xyXG4gIGNvbnN0IGdldFRhc2tzID0gKCkgPT4gdGFza3M7XHJcblxyXG4gIGNvbnN0IGNyZWF0ZVRhc2sgPSAodGl0bGUsIHRhc2tJZCkgPT4ge1xyXG4gICAgcmV0dXJuIHRhc2tNYW5hZ2VyLmNyZWF0ZVRhc2sodGl0bGUsIHRhc2tJZCk7XHJcbiAgfTtcclxuXHJcbiAgY29uc3QgZ2V0VGFza0J5SWQgPSAodGFza0lkKSA9PiB7XHJcbiAgICByZXR1cm4gdGFza01hbmFnZXIuZ2V0VGFza0J5SWQodGFza0lkKTtcclxuICB9O1xyXG5cclxuICBjb25zdCB1cGRhdGVUYXNrID0gKHRhc2tJZCwgdXBkYXRlZEVudHJ5KSA9PiB7XHJcbiAgICByZXR1cm4gdGFza01hbmFnZXIudXBkYXRlVGFzayh0YXNrSWQsIHVwZGF0ZWRFbnRyeSk7XHJcbiAgfTtcclxuXHJcbiAgY29uc3QgcmVtb3ZlVGFzayA9ICh0YXNrSWQpID0+IHtcclxuICAgIHJldHVybiB0YXNrTWFuYWdlci5yZW1vdmVUYXNrKHRhc2tJZCk7XHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIGdldFRpdGxlLFxyXG4gICAgZ2V0SWQsXHJcbiAgICBnZXRUYXNrcyxcclxuICAgIGNyZWF0ZVRhc2ssXHJcbiAgICBnZXRUYXNrQnlJZCxcclxuICAgIHVwZGF0ZVRhc2ssXHJcbiAgICByZW1vdmVUYXNrLFxyXG4gIH07XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBMaXN0O1xyXG4iLCJjb25zdCBUYXNrTWFuYWdlciA9ICh0YXNrTGlzdCkgPT4ge1xyXG4gIGNvbnN0IGdldFRhc2tCeUlkID0gKHRhc2tJZCkgPT4ge1xyXG4gICAgcmV0dXJuIHRhc2tMaXN0LmZpbmQoKHRhc2spID0+IHRhc2suaWQgPT09IHRhc2tJZCk7XHJcbiAgfTtcclxuXHJcbiAgY29uc3QgZ2V0VGFza0J5SW5kZXggPSAodGFza0lkKSA9PiB7XHJcbiAgICByZXR1cm4gdGFza0xpc3QuZmluZEluZGV4KCh0YXNrKSA9PiB0YXNrLmlkID09PSB0YXNrSWQpO1xyXG4gIH07XHJcblxyXG4gIGNvbnN0IGNyZWF0ZVRhc2sgPSAodGl0bGUsIHRhc2tJZCA9IGNyeXB0by5yYW5kb21VVUlEKCkuc2xpY2UoMCwgOCkpID0+IHtcclxuICAgIHRhc2tMaXN0LnB1c2goe1xyXG4gICAgICBpZDogdGFza0lkLFxyXG4gICAgICB0aXRsZSxcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHRhc2tMaXN0W3Rhc2tMaXN0Lmxlbmd0aCAtIDFdO1xyXG4gIH07XHJcblxyXG4gIGNvbnN0IHVwZGF0ZVRhc2sgPSAodGFza0lkLCB1cGRhdGVkRW50cnkpID0+IHtcclxuICAgIGNvbnN0IHRhc2tJbmRleCA9IGdldFRhc2tCeUluZGV4KHRhc2tJZCk7XHJcbiAgICB0YXNrTGlzdFt0YXNrSW5kZXhdID0geyAuLi50YXNrTGlzdFt0YXNrSW5kZXhdLCAuLi51cGRhdGVkRW50cnkgfTtcclxuICAgIHJldHVybiB0YXNrTGlzdFt0YXNrSW5kZXhdO1xyXG4gIH07XHJcblxyXG4gIGNvbnN0IHJlbW92ZVRhc2sgPSAodGFza0lkKSA9PiB7XHJcbiAgICBjb25zdCB0YXNrSW5kZXggPSBnZXRUYXNrQnlJbmRleCh0YXNrSWQpO1xyXG4gICAgdGFza0xpc3Quc3BsaWNlKHRhc2tJbmRleCwgMSk7XHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIHsgZ2V0VGFza0J5SWQsIGNyZWF0ZVRhc2ssIHVwZGF0ZVRhc2ssIHJlbW92ZVRhc2sgfTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFRhc2tNYW5hZ2VyO1xyXG4iLCJpbXBvcnQgTGlzdCBmcm9tIFwiLi9MaXN0L0xpc3RcIjtcclxuXHJcbmNvbnN0IFByb2plY3QgPSAodGl0bGUsIGlkID0gY3J5cHRvLnJhbmRvbVVVSUQoKS5zbGljZSgwLCA4KSkgPT4ge1xyXG4gIGNvbnN0IGxpc3RzID0gW107XHJcblxyXG4gIGNvbnN0IGdldFRpdGxlID0gKCkgPT4gdGl0bGU7XHJcbiAgY29uc3QgZ2V0SWQgPSAoKSA9PiBpZDtcclxuICBjb25zdCBnZXRMaXN0cyA9ICgpID0+IGxpc3RzO1xyXG5cclxuICBjb25zdCBjcmVhdGVMaXN0ID0gKHRpdGxlLCBpZCkgPT4ge1xyXG4gICAgbGlzdHMucHVzaChMaXN0KHRpdGxlLCBpZCkpO1xyXG4gICAgcmV0dXJuIGxpc3RzW2xpc3RzLmxlbmd0aCAtIDFdO1xyXG4gIH07XHJcblxyXG4gIGNvbnN0IGdldExpc3RCeUlkID0gKGxpc3RJZCkgPT4ge1xyXG4gICAgY29uc3QgbGlzdEluZGV4ID0gbGlzdHMuZmluZEluZGV4KChsaXN0KSA9PiBsaXN0LmdldElkKCkgPT09IGxpc3RJZCk7XHJcblxyXG4gICAgcmV0dXJuIGxpc3RzW2xpc3RJbmRleF07XHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIHsgZ2V0VGl0bGUsIGdldElkLCBnZXRMaXN0cywgY3JlYXRlTGlzdCwgZ2V0TGlzdEJ5SWQgfTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFByb2plY3Q7XHJcbiIsImltcG9ydCBQcm9qZWN0IGZyb20gXCIuL1Byb2plY3RcIjtcclxuaW1wb3J0IHB1YlN1YiBmcm9tIFwiLi9wdWJTdWIuanNcIjtcclxuaW1wb3J0IHN0b3JlIGZyb20gXCIuL3N0b3JlLmpzXCI7XHJcbmltcG9ydCB7IGNyZWF0ZURlZmF1bHRQcm9qZWN0IH0gZnJvbSBcIi4vUHJvamVjdEhhbmRsZXJcIjtcclxuXHJcbmZ1bmN0aW9uIHN0b3JhZ2VBdmFpbGFibGUoKSB7XHJcbiAgdHJ5IHtcclxuICAgIHZhciBzdG9yYWdlID0gd2luZG93W1wibG9jYWxTdG9yYWdlXCJdLFxyXG4gICAgICB4ID0gXCJfX3N0b3JhZ2VfdGVzdF9fXCI7XHJcbiAgICBzdG9yYWdlLnNldEl0ZW0oeCwgeCk7XHJcbiAgICBzdG9yYWdlLnJlbW92ZUl0ZW0oeCk7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9IGNhdGNoIChlKSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICBlIGluc3RhbmNlb2YgRE9NRXhjZXB0aW9uICYmXHJcbiAgICAgIC8vIGV2ZXJ5dGhpbmcgZXhjZXB0IEZpcmVmb3hcclxuICAgICAgKGUuY29kZSA9PT0gMjIgfHxcclxuICAgICAgICAvLyBGaXJlZm94XHJcbiAgICAgICAgZS5jb2RlID09PSAxMDE0IHx8XHJcbiAgICAgICAgLy8gdGVzdCBuYW1lIGZpZWxkIHRvbywgYmVjYXVzZSBjb2RlIG1pZ2h0IG5vdCBiZSBwcmVzZW50XHJcbiAgICAgICAgLy8gZXZlcnl0aGluZyBleGNlcHQgRmlyZWZveFxyXG4gICAgICAgIGUubmFtZSA9PT0gXCJRdW90YUV4Y2VlZGVkRXJyb3JcIiB8fFxyXG4gICAgICAgIC8vIEZpcmVmb3hcclxuICAgICAgICBlLm5hbWUgPT09IFwiTlNfRVJST1JfRE9NX1FVT1RBX1JFQUNIRURcIikgJiZcclxuICAgICAgLy8gYWNrbm93bGVkZ2UgUXVvdGFFeGNlZWRlZEVycm9yIG9ubHkgaWYgdGhlcmUncyBzb21ldGhpbmcgYWxyZWFkeSBzdG9yZWRcclxuICAgICAgc3RvcmFnZSAmJlxyXG4gICAgICBzdG9yYWdlLmxlbmd0aCAhPT0gMFxyXG4gICAgKTtcclxuICB9XHJcbn1cclxuXHJcbmNvbnN0IF9fc3RyaW5naWZ5SlNPTiA9IChvYmopID0+IHtcclxuICByZXR1cm4gSlNPTi5zdHJpbmdpZnkob2JqKTtcclxufTtcclxuXHJcbmNvbnN0IHJldHJpZXZlSXRlbSA9IChrZXkpID0+IHtcclxuICBjb25zdCBzdG9yZWRTdHJpbmcgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShrZXkpO1xyXG4gIHJldHVybiBKU09OLnBhcnNlKHN0b3JlZFN0cmluZyk7XHJcbn07XHJcblxyXG4vKlxyXG4gIERhdGEgU3RydWN0dXJlXHJcbiAgIGxvY2FsU3RvcmFnZSA9IHtcclxuICAgIHByb2plY3RzOiBbXHJcbiAgICAgIHtwcm9qZWN0VGl0bGUsIGlkLCBsaXN0czogW1xyXG4gICAgICAgIHsgdGl0bGUsIGlkLCB0YXNrczogW10gfVxyXG4gICAgICBdfSwgXHJcbiAgICAgIHtwcm9qZWN0VGl0bGUsIGlkLCBsaXN0cy4uLn1dLFxyXG4gICAgXX0sXHJcbiovXHJcblxyXG4vLyAgUHJvamVjdCByZXRyaWV2YWwgLSBHZXR0ZXJzXHJcblxyXG5jb25zdCBnZXRTdG9yZWRQcm9qZWN0cyA9ICgpID0+IHtcclxuICBjb25zdCBzdG9yZWRTdHJpbmcgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcInByb2plY3RzXCIpO1xyXG4gIGNvbnN0IHN0b3JlZFByb2plY3RzID0gSlNPTi5wYXJzZShzdG9yZWRTdHJpbmcpO1xyXG4gIHJldHVybiBzdG9yZWRQcm9qZWN0cztcclxufTtcclxuXHJcbmNvbnN0IGNoZWNrRm9yUHJvamVjdHMgPSAoKSA9PiB7XHJcbiAgLy8gbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oXCJwcm9qZWN0c1wiKTtcclxuICBpZiAoIShcInByb2plY3RzXCIgaW4gbG9jYWxTdG9yYWdlKSkge1xyXG4gICAgY29uc29sZS5sb2coXCJJbml0aWFsaXplIHByb2plY3RzIGFycmF5IGluIHN0b3JhZ2VcIik7XHJcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcInByb2plY3RzXCIsIEpTT04uc3RyaW5naWZ5KFtdKSk7XHJcbiAgICBjcmVhdGVEZWZhdWx0UHJvamVjdCgpO1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICAvLyBOZWVkIHRvIHJlY3JlYXRlIGN1cnJlbnQgcHJvamVjdCBhbmQgc2V0IGl0IGluIHN0b3JlXHJcbiAgc3RvcmUuc2V0Q3VycmVudFByb2plY3QocmVjb25zdHJ1Y3RDdXJyZW50UHJvamVjdCgpKTtcclxufTtcclxuXHJcbmNvbnN0IHJlY29uc3RydWN0Q3VycmVudFByb2plY3QgPSAoKSA9PiB7XHJcbiAgY29uc3Qgc3RvcmVkUHJvamVjdHMgPSBnZXRTdG9yZWRQcm9qZWN0cygpO1xyXG4gIGNvbnN0IGN1cnJQcm9qSW5kZXggPSByZXRyaWV2ZVByb2plY3RJbmRleCgpO1xyXG4gIGNvbnN0IGN1cnJlbnRQcm9qID0gc3RvcmVkUHJvamVjdHNbY3VyclByb2pJbmRleF07XHJcblxyXG4gIGNvbnN0IHJlY29uc3RydWN0ZWRQcm9qZWN0ID0gUHJvamVjdChjdXJyZW50UHJvai50aXRsZSwgY3VycmVudFByb2ouaWQpO1xyXG4gIHB1YlN1Yi5wdWJsaXNoKFwicHJvamVjdFJlY29uc3RydWN0ZWRcIiwgcmVjb25zdHJ1Y3RlZFByb2plY3QpO1xyXG5cclxuICBfX3JlY29uc3RydWN0TGlzdHMocmVjb25zdHJ1Y3RlZFByb2plY3QsIGN1cnJlbnRQcm9qLmxpc3RzKTtcclxuXHJcbiAgcmV0dXJuIHJlY29uc3RydWN0ZWRQcm9qZWN0O1xyXG59O1xyXG4vLyBJbml0aWFsaXplIHN1YnNjcmlwdGlvbnMgYWZ0ZXIgcmVjb25zdHJ1Y3Rpb25cclxuXHJcbmNvbnN0IF9fcmVjb25zdHJ1Y3RMaXN0cyA9IChwcm9qZWN0LCBsaXN0cykgPT4ge1xyXG4gIGxpc3RzLm1hcCgobGlzdCkgPT4ge1xyXG4gICAgY29uc3QgcmVjb25zdHJ1Y3RlZExpc3QgPSBwcm9qZWN0LmNyZWF0ZUxpc3QobGlzdC50aXRsZSwgbGlzdC5pZCk7XHJcbiAgICBwdWJTdWIucHVibGlzaChcImxpc3RSZWNvbnN0cnVjdGVkXCIsIHJlY29uc3RydWN0ZWRMaXN0KTtcclxuXHJcbiAgICBfX3JlY29uc3RydWN0VGFza3MocmVjb25zdHJ1Y3RlZExpc3QsIGxpc3QudGFza3MpO1xyXG4gIH0pO1xyXG59O1xyXG5cclxuY29uc3QgX19yZWNvbnN0cnVjdFRhc2tzID0gKGxpc3QsIHRhc2tzKSA9PiB7XHJcbiAgdGFza3MuZm9yRWFjaCgodGFzaykgPT4ge1xyXG4gICAgbGlzdC5jcmVhdGVUYXNrKHRhc2sudGl0bGUsIHRhc2suaWQpO1xyXG4gICAgY29uc3QgdXBkYXRlZFRhc2sgPSBsaXN0LnVwZGF0ZVRhc2sodGFzay5pZCwgdGFzayk7XHJcbiAgICBwdWJTdWIucHVibGlzaChcInRhc2tSZWNvbnN0cnVjdGVkXCIsIHsgbGlzdCwgdGFzazogdXBkYXRlZFRhc2sgfSk7XHJcbiAgfSk7XHJcbn07XHJcblxyXG4vLyBJbml0IHJlY29uc3RydWN0aW9uXHJcbi8vIHN0b3JlLnNldFByb2plY3RzKHJlY29uc3RydWN0UHJvamVjdHMoKSk7XHJcblxyXG4vLyBMaXN0ZW4gZm9yIG5ldyBjcmVhdGlvbnMgdG8gYmUgcHV0IGludG8gc3RvcmFnZVxyXG5cclxuLy8gIFByb2plY3QgU3RvcmFnZSAtIFNldHRlclxyXG5cclxucHViU3ViLnN1YnNjcmliZShcInByb2plY3RDcmVhdGVkXCIsIHN0b3JlUHJvamVjdCk7XHJcbnB1YlN1Yi5zdWJzY3JpYmUoXCJsaXN0Q3JlYXRlZFwiLCBzdG9yZUxpc3QpO1xyXG5wdWJTdWIuc3Vic2NyaWJlKFwidGFza0NyZWF0ZWRcIiwgc3RvcmVUYXNrKTtcclxucHViU3ViLnN1YnNjcmliZShcImN1cnJlbnRQcm9qZWN0U2V0XCIsIHN0b3JlQ3VycmVudFByb2plY3QpO1xyXG5cclxuZnVuY3Rpb24gc3RvcmVQcm9qZWN0KHByb2plY3QpIHtcclxuICAvLyBXZSBuZWVkIHRvIHNvbWVob3cgY29udmVydCBvdXIgY29tcGxleCBkYXRhIGludG8gYSBzaW1wbGUgZGF0YSBzdHJ1Y3R1cmVcclxuICBjb25zb2xlLmxvZyhcIlN0b3JpbmcgUHJvamVjdFwiKTtcclxuICBjb25zdCB1cGRhdGVkUHJvamVjdHMgPSByZXRyaWV2ZUl0ZW0oXCJwcm9qZWN0c1wiKTtcclxuICBjb25zb2xlLmxvZyh1cGRhdGVkUHJvamVjdHMpO1xyXG4gIHVwZGF0ZWRQcm9qZWN0cy5wdXNoKHtcclxuICAgIHRpdGxlOiBwcm9qZWN0LmdldFRpdGxlKCksXHJcbiAgICBpZDogcHJvamVjdC5nZXRJZCgpLFxyXG4gICAgbGlzdHM6IFtdLFxyXG4gIH0pO1xyXG5cclxuICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcInByb2plY3RzXCIsIEpTT04uc3RyaW5naWZ5KHVwZGF0ZWRQcm9qZWN0cykpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzdG9yZUxpc3QobGlzdCkge1xyXG4gIGNvbnN0IHVwZGF0ZWRQcm9qZWN0cyA9IHJldHJpZXZlSXRlbShcInByb2plY3RzXCIpO1xyXG4gIGNvbnN0IGluZGV4ID0gcmV0cmlldmVQcm9qZWN0SW5kZXgoKTtcclxuICBjb25zb2xlLmxvZyh1cGRhdGVkUHJvamVjdHNbaW5kZXhdKTtcclxuICB1cGRhdGVkUHJvamVjdHNbaW5kZXhdLmxpc3RzLnB1c2goe1xyXG4gICAgdGl0bGU6IGxpc3QuZ2V0VGl0bGUoKSxcclxuICAgIGlkOiBsaXN0LmdldElkKCksXHJcbiAgICB0YXNrczogW10sXHJcbiAgfSk7XHJcblxyXG4gIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwicHJvamVjdHNcIiwgSlNPTi5zdHJpbmdpZnkodXBkYXRlZFByb2plY3RzKSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHN0b3JlVGFzayhkYXRhKSB7XHJcbiAgY29uc3QgeyBsaXN0LCB0YXNrIH0gPSBkYXRhO1xyXG4gIGNvbnN0IHVwZGF0ZWRQcm9qZWN0cyA9IHJldHJpZXZlSXRlbShcInByb2plY3RzXCIpO1xyXG4gIGNvbnN0IHByb2pJbmRleCA9IHJldHJpZXZlUHJvamVjdEluZGV4KCk7XHJcbiAgY29uc3QgbGlzdEluZGV4ID0gcmV0cmlldmVMaXN0SW5kZXgobGlzdC5nZXRJZCgpKTtcclxuICBjb25zdCBzdG9yZWRQcm9qZWN0ID0gdXBkYXRlZFByb2plY3RzW3Byb2pJbmRleF07XHJcbiAgY29uc3Qgc3RvcmVkTGlzdCA9IHN0b3JlZFByb2plY3QubGlzdHNbbGlzdEluZGV4XTtcclxuICBzdG9yZWRMaXN0LnRhc2tzLnB1c2godGFzayk7XHJcblxyXG4gIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwicHJvamVjdHNcIiwgSlNPTi5zdHJpbmdpZnkodXBkYXRlZFByb2plY3RzKSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHN0b3JlVXBkYXRlZFRhc2sobGlzdElkLCB0YXNrKSB7XHJcbiAgY29uc3QgdXBkYXRlZFByb2plY3RzID0gcmV0cmlldmVJdGVtKFwicHJvamVjdHNcIik7XHJcbiAgY29uc3QgcHJvakluZGV4ID0gcmV0cmlldmVQcm9qZWN0SW5kZXgoKTtcclxuICBjb25zdCBsaXN0SW5kZXggPSByZXRyaWV2ZUxpc3RJbmRleChsaXN0SWQpO1xyXG4gIGNvbnN0IHByb2plY3QgPSB1cGRhdGVkUHJvamVjdHNbcHJvakluZGV4XTtcclxuICBjb25zdCBsaXN0ID0gcHJvamVjdC5saXN0c1tsaXN0SW5kZXhdO1xyXG4gIGNvbnN0IHRhc2tzQXJyYXkgPSBsaXN0LnRhc2tzO1xyXG4gIGNvbnN0IHRhc2tJbmRleCA9IHJldHJpZXZlVGFza0luZGV4KGxpc3QsIHRhc2suaWQpO1xyXG4gIHRhc2tzQXJyYXlbdGFza0luZGV4XSA9IHsgLi4udGFza3NBcnJheVt0YXNrSW5kZXhdLCAuLi50YXNrIH07XHJcbiAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJwcm9qZWN0c1wiLCBKU09OLnN0cmluZ2lmeSh1cGRhdGVkUHJvamVjdHMpKTtcclxufVxyXG5cclxuZnVuY3Rpb24gc3RvcmVDdXJyZW50UHJvamVjdChkYXRhKSB7XHJcbiAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJjdXJyZW50UHJvamVjdFwiLCBKU09OLnN0cmluZ2lmeShkYXRhKSk7XHJcbn1cclxuXHJcbmNvbnN0IHJldHJpZXZlUHJvamVjdEluZGV4ID0gKCkgPT4ge1xyXG4gIGNvbnN0IHByb2plY3RzSW5TdG9yYWdlID0gcmV0cmlldmVJdGVtKFwicHJvamVjdHNcIik7XHJcbiAgY29uc3QgY3VycmVudFByb2plY3QgPSByZXRyaWV2ZUl0ZW0oXCJjdXJyZW50UHJvamVjdFwiKTtcclxuICBjb25zdCBpbmRleCA9IHByb2plY3RzSW5TdG9yYWdlLmZpbmRJbmRleChcclxuICAgIChwcm9qZWN0KSA9PiBwcm9qZWN0LmlkID09PSBjdXJyZW50UHJvamVjdC5pZFxyXG4gICk7XHJcbiAgcmV0dXJuIGluZGV4O1xyXG59O1xyXG5cclxuY29uc3QgcmV0cmlldmVMaXN0SW5kZXggPSAoaWQpID0+IHtcclxuICBjb25zdCBwcm9qZWN0c0luU3RvcmFnZSA9IHJldHJpZXZlSXRlbShcInByb2plY3RzXCIpO1xyXG4gIGNvbnN0IGN1cnJQcm9qSW5kZXggPSByZXRyaWV2ZVByb2plY3RJbmRleCgpO1xyXG4gIGNvbnN0IGxpc3RzID0gcHJvamVjdHNJblN0b3JhZ2VbY3VyclByb2pJbmRleF0ubGlzdHM7XHJcbiAgY29uc3QgaW5kZXggPSBsaXN0cy5maW5kSW5kZXgoKGxpc3QpID0+IGxpc3QuaWQgPT09IGlkKTtcclxuICByZXR1cm4gaW5kZXg7XHJcbn07XHJcblxyXG5jb25zdCByZXRyaWV2ZUxpc3QgPSAoaWQpID0+IHtcclxuICBjb25zdCB1cGRhdGVkUHJvamVjdHMgPSByZXRyaWV2ZUl0ZW0oXCJwcm9qZWN0c1wiKTtcclxuICBjb25zdCBwcm9qSW5kZXggPSByZXRyaWV2ZVByb2plY3RJbmRleCgpO1xyXG4gIGNvbnN0IGxpc3RJbmRleCA9IHJldHJpZXZlTGlzdEluZGV4KGlkKTtcclxuICBjb25zdCBwcm9qZWN0ID0gdXBkYXRlZFByb2plY3RzW3Byb2pJbmRleF07XHJcbiAgY29uc3QgbGlzdCA9IHByb2plY3QubGlzdHNbbGlzdEluZGV4XTtcclxuXHJcbiAgcmV0dXJuIGxpc3Q7XHJcbn07XHJcblxyXG5jb25zdCByZXRyaWV2ZVRhc2tJbmRleCA9IChhcnJheSwgdGFza0lkKSA9PiB7XHJcbiAgcmV0dXJuIGFycmF5LmZpbmRJbmRleCgodGFzaykgPT4gdGFzay5pZCA9PT0gdGFza0lkKTtcclxufTtcclxuXHJcbi8qICAgIFxyXG5cclxuXHJcbiAgV2UgbmVlZCB0byBub3cgcmVjb25zdHJ1Y3QgdGhlIG9iamVjdHMgdmlhIHRoZWlyIGZhY3RvcnkgZnVuY3Rpb25zXHJcbiAgQWxzbywgZmlndXJlIG91dCBob3cgdG8gZXh0cmFwb2xhdGUgYW5kIHN0b3JlIGRhdGEgd2l0aGluIHRoZSBzaW1wbGUgZGF0YSBzdHJ1Y3R1cmUgb2YgbG9jYWxTdG9yYWdlXHJcblxyXG5cclxuICBJbml0IC0gXHJcbiAgICBDaGVjayBpZiBsb2NhbFN0b3JhZ2UgY29udGFpbnMgYSBwcm9qZWN0LlxyXG4gICAgICBJZiBubyBwcm9qZWN0IGlzIGZvdW5kLCB0aGVuIGNyZWF0ZSB0aGUgZGVmYXVsdCBwcm9qZWN0XHJcblxyXG4gICAgICBJZiBsb2NhbFN0b3JhZ2UgY29udGFpbnMgYSBwcm9qZWN0Li4uXHJcbiAgICAgICAgSW1wb3J0IHRoZSBwcm9qZWN0IGFycmF5LlxyXG4gICAgICAgIFJlY29uc3RydWN0IHRoZSBQcm9qZWN0c1xyXG4gIFxyXG4gICAgICAgIFJlY29uc3RydWN0IHRoZSBMaXN0cyB3aXRoaW4gdGhlIFByb2plY3RcclxuICAgICAgICBjb25zdCBzdG9yZWRMaXN0cyA9IHN0b3JlZFByb2plY3RzLm1hcChwcm9qZWN0ID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHByb2plY3QubGlzdHM7XHJcbiAgICAgICAgfSlcclxuICAgICAgICBjb25zdCBzdG9yZWRUYXNrcyA9IHN0b3JlTGlzdHMubWFwKGxpc3QgPT4ge1xyXG4gICAgICAgICAgcmV0dXJuIGxpc3QudGFza3NcclxuICAgICAgICB9KVxyXG5cclxuICAgICAgICBjb25zdCBzdG9yZWRUYXNrcyA9IHN0b3JlZExpc3RzLm1hcChsaXN0ID0+IGxpc3QuZ2V0VGFza3MpO1xyXG4gICAgICAgIGNvbnN0IHJlY29uc3RydWN0TGlzdHMgPSBzdG9yZWRQcm9qZWN0cy5mb3JFYWNoKHN0b3JlZFByb2plY3QgPT4ge1xyXG4gICAgICAgICAgcmV0dXJuIHN0b3JlZFByb2plY3RzLm1hcChwcm9qZWN0ID0+IHByb2plY3QuKVxyXG4gICAgICAgICAgICByZWNvbnN0cnVjdGVkUHJvamVjdHMubWFwKFByb2plY3QgPT4gUHJvamVjdC5jcmVhdGVMaXN0KHRpdGxlLCBpZCkpXHJcbiAgICAgICAgfSk7XHJcblxyXG5cclxuICAgICAgICBcclxuKi9cclxuXHJcbmV4cG9ydCB7IHJldHJpZXZlSXRlbSwgY2hlY2tGb3JQcm9qZWN0cywgcmVjb25zdHJ1Y3RDdXJyZW50UHJvamVjdCB9O1xyXG4iLCJpbXBvcnQgUHJvamVjdCBmcm9tIFwiLi9Qcm9qZWN0LmpzXCI7XHJcbmltcG9ydCB7IGNoZWNrRm9yTGlzdHMgfSBmcm9tIFwiLi9MaXN0L0xpc3RIYW5kbGVyLmpzXCI7XHJcbmltcG9ydCB7IGNyZWF0ZUxpc3QgfSBmcm9tIFwiLi9FdmVudEhhbmRsZXIuanNcIjtcclxuaW1wb3J0IHN0b3JlIGZyb20gXCIuL3N0b3JlLmpzXCI7XHJcbmltcG9ydCBwdWJTdWIgZnJvbSBcIi4vcHViU3ViLmpzXCI7XHJcbmltcG9ydCB7IHJldHJpZXZlSXRlbSwgcmVjb25zdHJ1Y3RQcm9qZWN0cyB9IGZyb20gXCIuL2xvY2FsU3RvcmFnZUhlbHBlci5qc1wiO1xyXG5cclxuY29uc3QgVXNlckludGVyZmFjZSA9ICgoKSA9PiB7XHJcbiAgY29uc3QgaW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2xpc3QtaW5wdXRcIik7XHJcblxyXG4gIGNvbnN0IGluaXQgPSAoKSA9PiB7XHJcbiAgICBjb25zdCBjdXJyZW50UHJvamVjdCA9IHN0b3JlLmdldEN1cnJlbnRQcm9qZWN0KCk7XHJcblxyXG4gICAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgKGUpID0+IHtcclxuICAgICAgY3JlYXRlTGlzdChlLCBjdXJyZW50UHJvamVjdCk7XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICByZXR1cm4geyBpbml0IH07XHJcbn0pKCk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBVc2VySW50ZXJmYWNlO1xyXG4iLCJpbXBvcnQgUHJvamVjdCBmcm9tIFwiLi9Qcm9qZWN0LmpzXCI7XHJcbmltcG9ydCBwdWJTdWIgZnJvbSBcIi4vcHViU3ViLmpzXCI7XHJcbmltcG9ydCB7IGNyZWF0ZURlZmF1bHRMaXN0IH0gZnJvbSBcIi4vTGlzdC9MaXN0SGFuZGxlclwiO1xyXG5pbXBvcnQgc3RvcmUgZnJvbSBcIi4vc3RvcmUuanNcIjtcclxuXHJcbmNvbnN0IGNyZWF0ZURlZmF1bHRQcm9qZWN0ID0gKCkgPT4ge1xyXG4gIGNvbnNvbGUubG9nKFwiQ3JlYXRpbmcgZGVmYXVsdCBwcm9qZWN0XCIpO1xyXG4gIGNvbnN0IGRlZmF1bHRQcm9qZWN0ID0gUHJvamVjdChcIkRlZmF1bHRcIik7XHJcbiAgc3RvcmUuc2V0Q3VycmVudFByb2plY3QoZGVmYXVsdFByb2plY3QpO1xyXG5cclxuICBwdWJTdWIucHVibGlzaChcInByb2plY3RDcmVhdGVkXCIsIGRlZmF1bHRQcm9qZWN0KTtcclxuICBjcmVhdGVEZWZhdWx0TGlzdChkZWZhdWx0UHJvamVjdCk7XHJcbiAgcmV0dXJuIGRlZmF1bHRQcm9qZWN0O1xyXG59O1xyXG5cclxuZXhwb3J0IHsgY3JlYXRlRGVmYXVsdFByb2plY3QgfTtcclxuIiwiaW1wb3J0IHJlbmRlckxpc3QgZnJvbSBcIi4vTGlzdFJlbmRlcmVyLmpzXCI7XHJcbmltcG9ydCBwdWJTdWIgZnJvbSBcIi4uL3B1YlN1Yi5qc1wiO1xyXG5cclxuLypcclxuICBGbG93OlxyXG4gIFJldHJpZXZlIGxvY2FsU3RvcmFnZVxyXG4gIElmIG5vIHN0b3JhZ2UgaXMgYXZhaWxhYmxlLCB0aGVuIGNyZWF0ZSB0aGUgZGVmYXVsdCBsaXN0LlxyXG4gIEVsc2UsIHJlbmRlciB0aGUgc3RvcmVkIExpc3QuXHJcbiAgICBUaGVuLCByZW5kZXIgdGhlIHN0b3JlZCB0YXNrcyBpZiB0aGVyZSBhcmUgdGFza3NcclxuXHJcbiovXHJcblxyXG5jb25zdCBjcmVhdGVEZWZhdWx0TGlzdCA9IChkZWZhdWx0UHJvamVjdCkgPT4ge1xyXG4gIGNvbnN0IGhhYml0TGlzdCA9IGRlZmF1bHRQcm9qZWN0LmNyZWF0ZUxpc3QoXCJIYWJpdHNcIik7XHJcbiAgY29uc3QgZmlyc3RUYXNrID0gaGFiaXRMaXN0LmNyZWF0ZVRhc2soXCJDcmVhdGUgeW91ciBmaXJzdCBoYWJpdCFcIik7XHJcbiAgcHViU3ViLnB1Ymxpc2goXCJsaXN0Q3JlYXRlZFwiLCBoYWJpdExpc3QpO1xyXG4gIHB1YlN1Yi5wdWJsaXNoKFwidGFza0NyZWF0ZWRcIiwgeyBsaXN0OiBoYWJpdExpc3QsIHRhc2s6IGZpcnN0VGFzayB9KTtcclxufTtcclxuXHJcbi8vIE1heSBiZSB1c2VsZXNzIG5vd1xyXG5cclxuLy8gY29uc3QgY2hlY2tGb3JMaXN0cyA9IChjdXJyZW50UHJvamVjdCkgPT4ge1xyXG4vLyAgIGNvbnNvbGUubG9nKGN1cnJlbnRQcm9qZWN0KTtcclxuLy8gICBjb25zdCBsaXN0cyA9IGN1cnJlbnRQcm9qZWN0LmdldExpc3RzKCk7XHJcbi8vICAgaWYgKGxpc3RzLmxlbmd0aCkge1xyXG4vLyAgICAgLy8gVGhpcyBpcyByZW5kZXJpbmcgZXZlcnkgdGFzayB3aXRoaW4gdGhlIGxpc3QgcmlnaHQgbm93IGV2ZW4gaWYgdGhlcmUgYXJlIG5vbmUuXHJcbi8vICAgICBsaXN0cy5mb3JFYWNoKChsaXN0KSA9PiByZW5kZXJMaXN0KGxpc3QpKTtcclxuLy8gICB9IGVsc2Uge1xyXG4vLyAgICAgY3JlYXRlRGVmYXVsdExpc3QoY3VycmVudFByb2plY3QpO1xyXG4vLyAgIH1cclxuLy8gfTtcclxuXHJcbmV4cG9ydCB7IGNyZWF0ZURlZmF1bHRMaXN0IH07XHJcbiIsImltcG9ydCByZW5kZXJMaXN0IGZyb20gXCIuL21vZHVsZXMvTGlzdC9MaXN0UmVuZGVyZXIuanNcIjtcclxuaW1wb3J0IFVzZXJJbnRlcmZhY2UgZnJvbSBcIi4vbW9kdWxlcy9Vc2VySW50ZXJmYWNlLmpzXCI7XHJcblxyXG5pbXBvcnQgeyBjaGVja0ZvclByb2plY3RzIH0gZnJvbSBcIi4vbW9kdWxlcy9sb2NhbFN0b3JhZ2VIZWxwZXIuanNcIjtcclxuXHJcbmNoZWNrRm9yUHJvamVjdHMoKTtcclxuY29uc3QgVUkgPSBVc2VySW50ZXJmYWNlO1xyXG5VSS5pbml0KCk7XHJcbiJdLCJuYW1lcyI6WyJhcHBlbmRDdXN0b21FbGVtZW50IiwiY3JlYXRlQ3VzdG9tRWxlbWVudCIsIm9wdGlvbnMiLCJ0YWdOYW1lIiwiY2xhc3NMaXN0IiwidGV4dENvbnRlbnQiLCJhdHRyaWJ1dGVzIiwiZWxlbWVudCIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImFkZCIsIkFycmF5IiwiaXNBcnJheSIsImF0dHIiLCJ2YWx1ZSIsInNldEF0dHJpYnV0ZSIsInRhcmdldCIsInRhcmdldEVsZW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiYXBwZW5kQ2hpbGQiLCJjdXN0b21FbGVtZW50SGVscGVyIiwiZGF0ZVN0cmluZyIsImRhdGUiLCJEYXRlIiwic2V0SG91cnMiLCJ0b0xvY2FsZURhdGVTdHJpbmciLCJtb250aCIsImRheSIsInllYXIiLCJjdXJyZW50TGlzdCIsInRhc2tJZCIsIl9fY3JlYXRlRm9ybUVsZW1lbnRzIiwidGFzayIsImZyYWdtZW50IiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsInRpdGxlIiwibmFtZSIsImRlc2NyaXB0aW9uIiwiZHVlRGF0ZSIsInZhbHVlQXNEYXRlIiwiZ2V0RnVsbFllYXIiLCJnZXRNb250aCIsImdldERhdGUiLCJkaWZmaWN1bHR5Iiwib3B0aW9uRWxlbWVudHMiLCJtYXAiLCJvcHRpb24iLCJhcHBlbmQiLCJmb3JtQnV0dG9ucyIsIl9fY3JlYXRlRm9ybUJ1dHRvbnMiLCJkaXYiLCJzdWJtaXRCdG4iLCJjYW5jZWxCdG4iLCJvbmNsaWNrIiwiZSIsInByZXZlbnREZWZhdWx0IiwiZm9ybSIsImNsb3Nlc3QiLCJ0YXNrQ29udGFpbmVyIiwicGFyZW50Tm9kZSIsIm1haW5EZXRhaWxzIiwicmVtb3ZlIiwibWFpbkRldGFpbHNFbGVtZW50cyIsImNyZWF0ZU1haW5EZXRhaWxzRWxlbWVudHMiLCJjYW5jZWxGb3JtIiwiZ2V0VGFza0J5SWQiLCJhcHBlbmRFZGl0VGFza0Zvcm0iLCJlZGl0Rm9ybSIsImlkIiwiYWRkRXZlbnRMaXN0ZW5lciIsImxpc3QiLCJib3R0b21QYW5lbCIsImRhdGEiLCJGb3JtRGF0YSIsIm9iaiIsInVwZGF0ZWRUYXNrIiwidXBkYXRlVGFzayIsInJlcGxhY2VDaGlsZHJlbiIsImJvdHRvbVBhbmVsRWxlbWVudHMiLCJjcmVhdGVCb3R0b21QYW5lbEVsZW1lbnRzIiwic3VibWl0Rm9ybSIsIl9fY3JlYXRlRWRpdFRhc2tGb3JtIiwiZXZlbnRIYW5kbGVyIiwic2V0RWRpdE1vZGUiLCJ0YXNrRWxlbWVudCIsImNvbnRhaW5zIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJmb3JFYWNoIiwidGV4dGFyZWEiLCJrZXkiLCJzaGlmdEtleSIsInN1Ym1pdEV2ZW50IiwiRXZlbnQiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsImRpc3BhdGNoRXZlbnQiLCJzZXRQcmlvcml0eSIsInByaW9yaXR5Iiwic3JjIiwidG9nZ2xlIiwiZGVsZXRlVGFzayIsInJlbW92ZVRhc2siLCJ0b29scyIsImltZ1NyYyIsImNsYXNzTmFtZSIsIm9uQ2xpY2siLCJjcmVhdGVUb29sYmFyIiwidG9vbGJhckNvbnRhaW5lciIsInRvb2wiLCJidG4iLCJpbWciLCJfX2NyZWF0ZUJ0bnMiLCJldmVudHMiLCJnZXRFdmVudHMiLCJzdWJzY3JpYmUiLCJldmVudCIsImNhbGxiYWNrIiwiaW5kZXgiLCJjb25zb2xlIiwibG9nIiwiaGFzT3duUHJvcGVydHkiLCJwdXNoIiwidW5zdWJzY3JpYmUiLCJzcGxpY2UiLCJwdWJsaXNoIiwicmVuZGVyVGFzayIsIl9fYXBwZW5kVGFza0VsZW1lbnRzIiwidGFza3NDb250YWluZXIiLCJnZXRJZCIsInRhc2tFbGVtZW50cyIsIl9fY3JlYXRlVGFza0VsZW1lbnRzIiwicHJlcGVuZCIsImRhdGFzZXQiLCJ0b29sYmFyIiwiX19yZW5kZXJNYWluRGV0YWlscyIsIl9fcmVuZGVyQm90dG9tUGFuZWwiLCJlZGl0VGFzayIsInRvZ2dsZURldGFpbHMiLCJzdHlsZSIsIm9wYWNpdHkiLCJ2aXNpYmlsaXR5IiwibWFpbkRldGFpbHNDb250YWluZXIiLCJkaWZmaWN1bHR5RWwiLCJnZXRUYXNrRGlmZmljdWx0eSIsImR1ZURhdGVFbCIsImF1dG9SZXNpemUiLCJ0aGlzIiwiaGVpZ2h0Iiwic2Nyb2xsSGVpZ2h0IiwiZWwiLCJwcmV2aW91cyIsImNsb25lTm9kZSIsImlucHV0IiwiY3VycmVudFRhc2siLCJ3b3JkQnJlYWsiLCJyZXBsYWNlV2l0aCIsImJsdXIiLCJvbmNlIiwiZm9jdXMiLCJleHBhbmRlZERldGFpbHMiLCJleHBhbmRlZFRhc2siLCJleHBhbmRlZERpdiIsIl9fY3JlYXRlRXhwYW5kZWRUYXNrIiwiYWZ0ZXIiLCJyZW5kZXJFeHBhbmRlZFRhc2siLCJyZW5kZXJMaXN0IiwiX19hcHBlbmRMaXN0Q29udGFpbmVyIiwiX19hcHBlbmRMaXN0QW5kVGl0bGVFbGVtZW50cyIsIl9fYXBwZW5kVGFza0NvbnRhaW5lciIsImxpc3RFbGVtZW50IiwiZ2V0VGl0bGUiLCJfX2NyZWF0ZVRhc2tGb3JtIiwidGFza0Zvcm0iLCJ0YXNrSW5wdXQiLCJuZXdUYXNrIiwiY3JlYXRlVGFzayIsImN1cnJlbnRQcm9qZWN0IiwiZ2V0Q3VycmVudFByb2plY3QiLCJzZXRDdXJyZW50UHJvamVjdCIsInByb2plY3QiLCJjcnlwdG8iLCJyYW5kb21VVUlEIiwic2xpY2UiLCJ0YXNrcyIsInRhc2tNYW5hZ2VyIiwidGFza0xpc3QiLCJnZXRUYXNrQnlJbmRleCIsImZpbmRJbmRleCIsImZpbmQiLCJsZW5ndGgiLCJ1cGRhdGVkRW50cnkiLCJ0YXNrSW5kZXgiLCJnZXRUYXNrcyIsImxpc3RzIiwiZ2V0TGlzdHMiLCJjcmVhdGVMaXN0IiwiZ2V0TGlzdEJ5SWQiLCJsaXN0SWQiLCJsaXN0SW5kZXgiLCJyZXRyaWV2ZUl0ZW0iLCJzdG9yZWRTdHJpbmciLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwiSlNPTiIsInBhcnNlIiwiX19yZWNvbnN0cnVjdExpc3RzIiwicmVjb25zdHJ1Y3RlZExpc3QiLCJfX3JlY29uc3RydWN0VGFza3MiLCJ1cGRhdGVkUHJvamVjdHMiLCJzZXRJdGVtIiwic3RyaW5naWZ5IiwicmV0cmlldmVQcm9qZWN0SW5kZXgiLCJwcm9qSW5kZXgiLCJyZXRyaWV2ZUxpc3RJbmRleCIsInByb2plY3RzSW5TdG9yYWdlIiwiaW5pdCIsIm5ld0xpc3QiLCJkZWZhdWx0UHJvamVjdCIsImhhYml0TGlzdCIsImZpcnN0VGFzayIsImNyZWF0ZURlZmF1bHRMaXN0IiwiY3JlYXRlRGVmYXVsdFByb2plY3QiLCJjdXJyZW50UHJvaiIsImdldFN0b3JlZFByb2plY3RzIiwicmVjb25zdHJ1Y3RlZFByb2plY3QiLCJyZWNvbnN0cnVjdEN1cnJlbnRQcm9qZWN0IiwiY2hlY2tGb3JQcm9qZWN0cyJdLCJzb3VyY2VSb290IjoiIn0=