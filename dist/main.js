(()=>{"use strict";const e=(e,t=crypto.randomUUID().slice(0,8))=>{const a=[],n=(e=>{const t=t=>e.findIndex((e=>e.id===t));return{getTaskById:t=>e.find((e=>e.id===t)),createTask:t=>(e.push({id:crypto.randomUUID().slice(0,8),title:t}),e[e.length-1]),updateTask:(a,n)=>{const s=t(a);e[s]={...e[s],...n}},removeTask:a=>{const n=t(a);e.splice(n,1)}}})(a);return{getTitle:()=>e,getId:()=>t,getTasks:()=>a,createTask:e=>n.createTask(e),getTaskById:e=>n.getTaskById(e),updateTask:(e,t)=>n.updateTask(e,t),removeTask:e=>n.removeTask(e)}},{appendCustomElement:t,createCustomElement:a}=(()=>{function e(e){const{tagName:t,classList:a,textContent:n,attributes:s}=e,r=document.createElement(t);if("string"==typeof a?r.classList.add(a):Array.isArray(a)&&r.classList.add(...a),n&&(r.textContent=n),Array.isArray(s)){const[e,t]=s;r.setAttribute(e,t)}return r}return{appendCustomElement:function(t){const{target:a}=t,n=document.querySelector(a),s=e(t);n.appendChild(s)},createCustomElement:e}})(),{createTaskElements:n,renderTaskElements:s,renderExpandedTask:r}={createTaskElements:(e,t)=>e.map((e=>{const a=document.createElement("div");a.className="task",a.dataset.id=e.id;const n=document.createElement("p");return n.textContent=e.title,a.appendChild(n),a.addEventListener("dblclick",(a=>{o(a,e.id,t)})),a.addEventListener("click",(t=>{l(t,e)})),a})),renderTaskElements:(e,t)=>{e.prepend(...t)},renderExpandedTask:(e,t)=>{const n=(e=>{const{description:t,dueDate:n,difficulty:s}=e,r=document.createDocumentFragment(),d=document.createElement("div");return d.classList.add("expanded-details"),r.append(d),d.append(a({target:d,tagName:"p",classList:"description",textContent:"description"})),d.append(a({target:d,tagName:"p",classList:"due-date",textContent:"dueDate"})),d.append(a({target:d,tagName:"p",classList:"difficulty",textContent:"difficulty"})),r})(t);return e.append(n),n}},{renderListElements:d}={renderListElements:e=>{e.forEach((e=>{const r=e.getId();(e=>{t({target:".list-container",tagName:"div",classList:["list"],attributes:["data-id",e]})})(r),((e,n)=>{const s=document.querySelector(`[data-id="${n}"]`);t({target:`[data-id="${n}"]`,tagName:"h2",textContent:e.getTitle()}),s.appendChild(((e,t)=>{const n=document.createElement("form");n.className="task-form";const s=a({tagName:"input",classList:"task-input",attributes:["placeholder","Add a task"]});return n.appendChild(s),s.addEventListener("keydown",(a=>{c(a,e,t)})),n})(s,e))})(e,r),(e=>{t({target:`[data-id="${e}"]`,tagName:"div",classList:"task-container"})})(r),((e,t)=>{const a=document.querySelector(`[data-id="${t}"]`).querySelector(".task-container"),r=n(e.getTasks(),e);s(a,r)})(e,r)}))}},{handleCreateListInput:i,handleCreateTaskInput:c,editTask:o,toggleDetails:l}={handleCreateListInput:(e,t)=>{if("Enter"===e.key){e.preventDefault();const a=e.target.value,n=t.createList(a);d([n]),e.target.value=""}},handleCreateTaskInput:(e,t,a)=>{if("Enter"===e.key){e.preventDefault();const r=e.target.value,d=a.createTask(r),i=n([d],a);s(t.querySelector(".task-container"),i),e.target.value=""}},editTask:(e,t,a)=>{const n=e.target,s=n.cloneNode(!0),r=document.createElement("input"),d=a.getTaskById(t);r.value=d.title,n.replaceWith(r),r.addEventListener("keydown",(e=>{"Enter"===e.key&&r.blur()})),r.addEventListener("blur",(()=>{a.updateTask(t,{title:r.value}),s.textContent=r.value,r.replaceWith(s)}),{once:!0}),r.focus()},toggleDetails:(e,t)=>{const a=e.target.closest(".task"),n=a.querySelector(".expanded-details");a.classList.toggle("expanded"),n?n.remove():r(a,t)}},{checkForLists:u}={checkForLists:e=>{const t=e.getLists();t.length?d(t):((e=>{e.createList("Habits").createTask("Create your first task!")})(e),d(e.getLists()))}},p=(()=>{const t=[];return{getLists:()=>t,createList:a=>(t.push(e(a)),t[t.length-1]),findList:e=>{const a=t.findIndex((t=>t.id===e));return t[a]}}})();(()=>{const e=document.querySelector("#list-input");return{init:()=>{u(p),e.addEventListener("keydown",(e=>{i(e,p)}))}}})().init()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,