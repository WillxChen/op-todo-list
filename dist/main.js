(()=>{"use strict";var t={d:(e,s)=>{for(var a in s)t.o(s,a)&&!t.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:s[a]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},e={};t.r(e),t.d(e,{$l:()=>y,vr:()=>k,eT:()=>f,rH:()=>v});const{appendCustomElement:s,createCustomElement:a}=(()=>{function t(t){const{tagName:e,classList:s,textContent:a,attributes:n}=t,r=document.createElement(e);if("string"==typeof s?r.classList.add(s):Array.isArray(s)&&r.classList.add(...s),a&&(r.textContent=a),Array.isArray(n)){const[t,e]=n;r.setAttribute(t,e)}return r}return{appendCustomElement:function(e){const{target:s}=e,a=document.querySelector(s),n=t(e);a.appendChild(n)},createCustomElement:t}})(),n=t=>{if(!t)return"";const e=new Date(t);return e.setHours(24,0,0,0),e.toLocaleDateString("en-US",{month:"2-digit",day:"2-digit",year:"2-digit"})},r=(()=>{const t={};return{getEvents:()=>t,subscribe:(e,s)=>{let a;return console.log(`Subscribing to ${e}`),t.hasOwnProperty(e)||(t[e]=[]),a=t[e].push(s)-1,{unsubscribe(){t[e].splice(a,1)}}},publish:(e,s={})=>(console.log(`Executing ${e}`),t.hasOwnProperty(e)?t[e].map((t=>t(s))):[])}})(),i=(t,e)=>{const s=t=>{const e=document.createDocumentFragment(),s=a({tagName:"textarea",classList:"edit-title"});s.value=t.title,s.name="title";const r=a({tagName:"textarea",classList:"edit-description",attributes:["placeholder","Add a description"]});r.value=t.description||"",r.name="description";const i=a({tagName:"input",attributes:["type","date"],classList:"edit-date"}),c=new Date;t.dueDate?i.value=t.dueDate:i.value="",i.name="dueDate",i.onclick=()=>{i.valueAsDate=i.valueAsDate=new Date(c.getFullYear(),c.getMonth(),c.getDate(),12)};const o=a({tagName:"select",classList:"edit-difficulty"});o.name="difficulty";const l=[{name:"Select a Difficulty",value:""},{name:"Easy",value:"Easy"},{name:"Medium",value:"Medium"},{name:"Hard",value:"Hard"}].map((e=>{const{name:s,value:n}=e,r=a({tagName:"option",textContent:s,attributes:["value",`${n}`]});return t.difficulty===n&&(r.selected=!0),r}));o.append(...l);const d=n(t);return e.append(s,r,i,o,d),e},n=()=>{const s=a({tagName:"div",classList:"form-controls"}),n=a({tagName:"button",classList:"submit-btn",textContent:"Submit"}),r=a({tagName:"button",classList:"cancel-btn",textContent:"Cancel"});return r.onclick=s=>((t,e)=>{t.preventDefault();const s=t.target.closest("form"),a=s.parentNode,n=a.querySelector(".main-details");s.remove(),a.classList.remove("isEditable");const r=p(e);n.append(r)})(s,t.getTaskById(e)),s.append(r,n),s};return{appendEditTaskForm:a=>{const n=(()=>{const a=document.createElement("form"),n=t.getTaskById(e);return a.id="edit-task",a.append(s(n)),a.addEventListener("submit",(e=>{((t,e,s)=>{t.preventDefault();const a=t.target,n=a.parentNode,i=n.querySelector(".main-details"),c=n.querySelector(".bottom-panel"),o=new FormData(a),l={};for(const[t,e]of o)l[t]=e;const d=e.updateTask(s.id,l);r.publish("taskUpdated",{list:e,task:d}),a.remove();const u=p(d);i.append(u),c.replaceChildren();const g=m(d);c.append(g),n.classList.remove("isEditable")})(e,t,n)})),a})();return a.append(n),n}}},c=(t,e)=>{const s=((t,e)=>({setEditMode:s=>{const a=s.target.closest(".task");if(a.classList.contains("isEditable"))return;const n=a.querySelector(".main-details");a.classList.add("isEditable"),n.replaceChildren(),a.classList.contains("expanded")&&(a.querySelector(".expanded-details").remove(),a.classList.remove("expanded"));const r=i(t,e.id).appendEditTaskForm(a);[...r.getElementsByTagName("textarea")].forEach((t=>{t.addEventListener("keydown",(t=>{if("Enter"===t.key&&!t.shiftKey){t.preventDefault();const e=new Event("submit",{bubbles:!0,cancelable:!0});r.dispatchEvent(e)}}))}))},setPriority:s=>{t.getTaskById(e.id).priority?(t.updateTask(e.id,{priority:!1}),s.target.closest("img").src="../src/imgs/noun-star-4485746.svg"):(t.updateTask(e.id,{priority:!0}),s.target.closest("img").src="../src/imgs/noun-star-4485827.svg"),s.target.closest(".task").classList.toggle("isPriority"),s.target.closest("img").classList.toggle("filter-gray"),s.target.closest("img").classList.toggle("filter-yellow")},deleteTask:s=>{t.removeTask(e.id),r.publish("taskDeleted",{list:t,task:e}),s.target.closest(".task").remove()}}))(t,e),n=[{name:"Edit",imgSrc:"../src/imgs/noun-quill-4626718.svg",className:"filter-gray",onClick:t=>s.setEditMode(t)},{name:"Set Priority",imgSrc:"../src/imgs/noun-star-4485746.svg",className:"filter-gray",onClick:t=>s.setPriority(t)},{name:"Delete",imgSrc:"../src/imgs/noun-skull-4485674.svg",className:"filter-red",onClick:t=>s.deleteTask(t)}];return{createToolbar:()=>{const t=a({tagName:"div",classList:"toolbar"});return t.append((t=>{const e=document.createDocumentFragment();return t.forEach((t=>{const{name:s,imgSrc:n,className:r,onClick:i}=t,c=a({tagName:"button",attributes:["aria-label",`${s}`]}),o=a({tagName:"img",attributes:["src",`${n}`],classList:r});c.onclick=i,c.append(o),e.append(c)})),e})(n)),t}}};function o(t){console.log("Rendering task");const{list:e,task:s}=t;l(e,s)}r.subscribe("taskCreated",o),r.subscribe("taskReconstructed",o);const l=(t,e)=>{const s=document.querySelector(`[data-id="${t.getId()}"]`).querySelector(".tasks-container"),a=d(t,e);s.prepend(a)},d=(t,e)=>{const s=document.createElement("div");s.className="task",s.dataset.id=e.id;const a=c(t,e).createToolbar(t,s),n=u(e),r=g(t,e.id);return s.append(a),s.append(n),s.append(r),s.addEventListener("dblclick",(s=>{f(s,e.id,t)})),s.addEventListener("click",(s=>{v(s,t,e.id)})),s.addEventListener("mouseover",(()=>{a.style.opacity="1",a.style.visibility="visible"})),s.addEventListener("mouseout",(()=>{a.style.opacity="0",a.style.visibility="hidden"})),s},u=t=>{const e=document.createElement("div");return e.classList.add("main-details"),e.appendChild(p(t)),e},p=t=>{const e=document.createDocumentFragment(),s=a({tagName:"p",classList:"task-title",textContent:t.title}),n=t.description?a({tagName:"p",classList:"task-description",textContent:t.description}):" ";return e.append(s,n),e},g=(t,e)=>{const s=t.getTaskById(e),n=a({tagName:"div",classList:"bottom-panel"});return n.append(m(s)),n},m=t=>{const e=document.createDocumentFragment(),s=a({tagName:"p",textContent:(t=>{switch(t){case"Easy":return"⚔️";case"Medium":return"⚔️⚔️";case"Hard":return"⚔️⚔️⚔️";default:return""}})(t.difficulty)}),r=a({tagName:"p",textContent:n(t.dueDate)||""});return e.append(r,s),e},y=(t,e)=>{if("Enter"===t.key){t.preventDefault();const s=t.target.value,a=e.createList(s);t.target.value="",r.publish("listCreated",a)}},k=(t,e)=>{if("Enter"===t.key){t.preventDefault();const s=t.target.value,a=e.createTask(s);t.target.value="",r.publish("taskCreated",{list:e,task:a})}};function b(){this.style.height="auto",this.style.height=this.scrollHeight+"px"}const f=(t,e,s)=>{const a=t.target;if(!a.classList.contains("task-title"))return;const n=a.cloneNode(!0),r=document.createElement("textarea"),i=s.getTaskById(e);r.classList.add("temp-input"),r.value=i.title,r.style.wordBreak="break-word",a.replaceWith(r),r.style.height="auto",r.style.height=r.scrollHeight+"px",r.addEventListener("keydown",(t=>{"Enter"===t.key&&r.blur()})),r.addEventListener("blur",(()=>{s.updateTask(e,{title:r.value}),n.textContent=r.value,r.replaceWith(n)}),{once:!0}),r.addEventListener("input",b,!1),r.focus()},v=(t,e,s)=>{if(t.target.classList.contains("isEditable")||!t.target.classList.contains("task"))return;const r=t.target,i=r.querySelector(".main-details"),c=r.querySelector(".expanded-details");c?(c.remove(),r.classList.remove("expanded")):(((t,e)=>{const s=(t=>{const{dueDate:e,difficulty:s}=t,r=document.createDocumentFragment(),i=document.createElement("div");return i.classList.add("expanded-details"),r.append(i),i.append(a({tagName:"p",classList:"due-date",textContent:n(e)})),i.append(a({tagName:"p",classList:"difficulty",textContent:s})),r})(e);t.after(s)})(i,e.getTaskById(s)),r.classList.add("expanded"))},h=(t,s)=>{const a=t.target,n=a.cloneNode(!0),i=document.createElement("textarea");i.classList.add("temp-input"),i.value=s.getTitle(),i.style.wordBreak="break-word",a.replaceWith(i),i.style.height="auto",i.style.height=i.scrollHeight+"px",i.addEventListener("keydown",(t=>{"Enter"===t.key&&i.blur()})),i.addEventListener("blur",(()=>{const t=s.setTitle(i.value);r.publish("listUpdated",{list:s,title:t}),n.textContent=i.value,i.replaceWith(n),n.addEventListener("dblclick",(t=>{h(t,s)}))}),{once:!0}),i.addEventListener("input",e.autoResize,!1),i.focus()};function L(t){console.log("Rendering List"),E(t),S(t),C(t)}r.subscribe("listCreated",L),r.subscribe("listReconstructed",L);const E=t=>{s({target:".lists-container",tagName:"div",classList:["list"],attributes:["data-id",t.getId()]})},S=t=>{const e=document.querySelector(`[data-id="${t.getId()}"]`),s=a({tagName:"h2",classList:"list-title",textContent:t.getTitle()});s.addEventListener("dblclick",(e=>{h(e,t)})),e.append(s,T(t))},T=t=>{const e=document.createElement("form");e.className="task-form";const s=a({tagName:"input",classList:"task-input",attributes:["placeholder","Add a task"]});return e.appendChild(s),s.addEventListener("keydown",(e=>{k(e,t)})),e},C=t=>{s({target:`[data-id="${t.getId()}"]`,tagName:"div",classList:"tasks-container"})},N=(()=>{let t=null;return{getCurrentProject:()=>t,setCurrentProject:e=>(console.log("Setting current project: "+e.getTitle()),t=e,r.publish("currentProjectSet",{title:e.getTitle(),id:e.getId()}),t)}})(),I=(t,e=crypto.randomUUID().slice(0,8))=>{let s=t;const a=[],n=(t=>{const e=e=>t.findIndex((t=>t.id===e));return{getTaskById:e=>t.find((t=>t.id===e)),createTask:(e,s=crypto.randomUUID().slice(0,8))=>(t.push({id:s,title:e}),t[t.length-1]),updateTask:(s,a)=>{const n=e(s);return t[n]={...t[n],...a},t[n]},removeTask:s=>{const a=e(s);t.splice(a,1)}}})(a);return{getTitle:()=>s,setTitle:t=>s=t,getId:()=>e,getTasks:()=>a,createTask:(t,e)=>n.createTask(t,e),getTaskById:t=>n.getTaskById(t),updateTask:(t,e)=>n.updateTask(t,e),removeTask:t=>n.removeTask(t)}},j=(t,e=crypto.randomUUID().slice(0,8))=>{const s=[];return{getTitle:()=>t,getId:()=>e,getLists:()=>s,createList:(t,e)=>(s.push(I(t,e)),s[s.length-1]),getListById:t=>{const e=s.findIndex((e=>e.getId()===t));return s[e]}}},x=t=>{const e=localStorage.getItem(t);return JSON.parse(e)},D=(t,e)=>{e.map((e=>{const s=t.createList(e.title,e.id);r.publish("listReconstructed",s),w(s,e.tasks)}))},w=(t,e)=>{e.forEach((e=>{t.createTask(e.title,e.id);const s=t.updateTask(e.id,e);r.publish("taskReconstructed",{list:t,task:s})}))};r.subscribe("projectCreated",(function(t){const e=x("projects");e.push({title:t.getTitle(),id:t.getId(),lists:[]}),localStorage.setItem("projects",JSON.stringify(e))})),r.subscribe("listCreated",(function(t){const e=x("projects");e[O()].lists.push({title:t.getTitle(),id:t.getId(),tasks:[]}),localStorage.setItem("projects",JSON.stringify(e))})),r.subscribe("listUpdated",(function(t){const{list:e,title:s}=t,a=x("projects"),n=a[O()],r=q(e.getId());n.lists[r]={...n.lists[r],title:s},localStorage.setItem("projects",JSON.stringify(a))})),r.subscribe("taskCreated",(function(t){const{list:e,task:s}=t,a=x("projects");P(a,e.getId()).tasks.push(s),localStorage.setItem("projects",JSON.stringify(a))})),r.subscribe("taskUpdated",(function(t){const{list:e,task:s}=t,a=x("projects"),n=P(a,e.getId()).tasks,r=B(n,s.id);n[r]={...n[r],...s},localStorage.setItem("projects",JSON.stringify(a))})),r.subscribe("taskDeleted",(function(t){const{list:e,task:s}=t,a=x("projects"),n=P(a,e.getId()).tasks,r=B(n,s.id);n.splice(r,1),localStorage.setItem("projects",JSON.stringify(a))})),r.subscribe("currentProjectSet",(function(t){localStorage.setItem("currentProject",JSON.stringify(t))}));const P=(t,e)=>{const s=O(),a=q(e);return t[s].lists[a]},O=()=>{const t=x("projects"),e=x("currentProject");return t.findIndex((t=>t.id===e.id))},q=t=>x("projects")[O()].lists.findIndex((e=>e.id===t)),B=(t,e)=>t.findIndex((t=>t.id===e)),U=(()=>{const t=document.querySelector("#list-input");return{init:()=>{const e=N.getCurrentProject();t.addEventListener("keydown",(t=>{y(t,e)}))}}})();(()=>{if(!("projects"in localStorage))return console.log("Initialize projects array in storage"),localStorage.setItem("projects",JSON.stringify([])),void(()=>{console.log("Creating default project");const t=j("Default");N.setCurrentProject(t),r.publish("projectCreated",t),(t=>{const e=t.createList("Habits"),s=e.createTask("Create your first habit!");r.publish("listCreated",e),r.publish("taskCreated",{list:e,task:s})})(t)})();N.setCurrentProject((()=>{const t=(()=>{const t=localStorage.getItem("projects");return JSON.parse(t)})()[O()],e=j(t.title,t.id);return r.publish("projectReconstructed",e),D(e,t.lists),e})())})(),U.init()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,