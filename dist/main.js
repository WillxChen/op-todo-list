(()=>{"use strict";const t=(t,e=crypto.randomUUID().slice(0,8))=>{const a=[],s=(t=>{const e=e=>t.findIndex((t=>t.id===e));return{getTaskById:e=>t.find((t=>t.id===e)),createTask:e=>(t.push({id:crypto.randomUUID().slice(0,8),title:e}),t[t.length-1]),updateTask:(a,s)=>{const n=e(a);return t[n]={...t[n],...s},t[n]},removeTask:a=>{const s=e(a);t.splice(s,1)}}})(a);return{getTitle:()=>t,getId:()=>e,getTasks:()=>a,createTask:t=>s.createTask(t),getTaskById:t=>s.getTaskById(t),updateTask:(t,e)=>s.updateTask(t,e),removeTask:t=>s.removeTask(t)}},{appendCustomElement:e,createCustomElement:a}=(()=>{function t(t){const{tagName:e,classList:a,textContent:s,attributes:n}=t,r=document.createElement(e);if("string"==typeof a?r.classList.add(a):Array.isArray(a)&&r.classList.add(...a),s&&(r.textContent=s),Array.isArray(n)){const[t,e]=n;r.setAttribute(t,e)}return r}return{appendCustomElement:function(e){const{target:a}=e,s=document.querySelector(a),n=t(e);s.appendChild(n)},createCustomElement:t}})(),{handleCreateListInput:s,handleCreateTaskInput:n,editTask:r,toggleDetails:i}=(()=>{function t(){this.style.height="auto",this.style.height=this.scrollHeight+"px"}return{handleCreateListInput:(t,e)=>{if("Enter"===t.key){t.preventDefault();const a=t.target.value,s=e.createList(a);p([s]),t.target.value=""}},handleCreateTaskInput:(t,e,a)=>{if("Enter"===t.key){t.preventDefault();const s=t.target.value,n=a.createTask(s),r=l([n],a);u(e.querySelector(".tasks-container"),r),t.target.value=""}},editTask:(e,a,s)=>{const n=e.target;if(!n.classList.contains("task-title"))return;const r=n.cloneNode(!0),i=document.createElement("textarea"),c=s.getTaskById(a);i.classList.add("temp-input"),i.value=c.title,i.style.wordBreak="break-word",n.replaceWith(i),i.style.height="auto",i.style.height=i.scrollHeight+"px",i.addEventListener("keydown",(t=>{"Enter"===t.key&&i.blur()})),i.addEventListener("blur",(()=>{s.updateTask(a,{title:i.value}),r.textContent=i.value,i.replaceWith(r)}),{once:!0}),i.addEventListener("input",t,!1),i.focus()},toggleDetails:(t,e,a)=>{const s=e.getTaskById(a);if("IMG"===t.target.tagName||"P"===t.target.tagName||"TEXTAREA"===t.target.tagName)return;const n=t.target.closest(".task"),r=n.querySelector(".expanded-details");n.classList.contains("isEditable")||(r?(r.remove(),n.classList.remove("expanded")):(m(n,s),n.classList.add("expanded")))}}})(),c=t=>{if(!t)return"";const e=new Date(t);return e.setHours(24,0,0,0),e.toLocaleDateString("en-US",{month:"2-digit",day:"2-digit",year:"2-digit"})},o=(t,e)=>{const s=t=>{const e=document.createDocumentFragment(),s=a({tagName:"textarea",classList:"edit-title"});s.value=t.title,s.name="title";const r=a({tagName:"textarea",classList:"edit-description",attributes:["placeholder","Add a description"]});r.value=t.description||"",r.name="description";const i=a({tagName:"input",attributes:["type","date"],classList:"edit-date"}),c=new Date;t.dueDate?i.value=t.dueDate:i.valueAsDate=new Date(c.getFullYear(),c.getMonth(),c.getDate(),12),i.name="dueDate";const o=a({tagName:"select",classList:"edit-difficulty"});o.value=t.difficulty,o.name="difficulty";const d=["Easy","Medium","Hard"].map((t=>a({tagName:"option",textContent:t,attributes:["value",`${t}`]})));o.append(...d);const l=n();return e.append(s,r,i,o,l),e},n=()=>{const e=a({tagName:"div",classList:"form-controls"}),s=a({tagName:"button",classList:"submit-btn",textContent:"Submit"}),n=a({tagName:"button",classList:"cancel-btn",textContent:"Cancel"});return n.onclick=e=>((t,e,a)=>{t.preventDefault();const s=taskContainer.querySelector(".main-details");t.target.closest("form").remove(),taskContainer.classList.remove("isEditable");const n=e.updateTask(a,obj),r=g(n);s.append(r)})(e,t,task.id),e.append(n,s),e};return{appendEditTaskForm:a=>{const n=(()=>{const a=document.createElement("form"),n=t.getTaskById(e);return a.id="edit-task",a.append(s(n)),a.addEventListener("submit",(e=>{((t,e,a)=>{t.preventDefault();const s=t.target,n=s.parentNode,r=n.querySelector(".main-details"),i=new FormData(s),c={};for(const[t,e]of i)c[t]=e;const o=e.updateTask(a.id,c);s.remove();const d=g(o);r.append(d),n.classList.remove("isEditable")})(e,t,n)})),a})();return a.append(n),n}}},d=(t,e)=>{const s=((t,e)=>({setEditMode:a=>{const s=a.target.closest(".task");if(s.classList.contains("isEditable"))return;const n=s.querySelector(".main-details");s.classList.add("isEditable"),n.replaceChildren(),s.classList.contains("expanded")&&(s.querySelector(".expanded-details").remove(),s.classList.remove("expanded"));const r=o(t,e.id).appendEditTaskForm(s);[...r.getElementsByTagName("textarea")].forEach((t=>{t.addEventListener("keydown",(t=>{if("Enter"===t.key&&!t.shiftKey){t.preventDefault();const e=new Event("submit",{bubbles:!0,cancelable:!0});r.dispatchEvent(e)}}))}))},setPriority:a=>{t.getTaskById(e.id).priority?(t.updateTask(e.id,{priority:!1}),a.target.closest("img").src="../src/imgs/noun-star-4485746.svg"):(t.updateTask(e.id,{priority:!0}),a.target.closest("img").src="../src/imgs/noun-star-4485827.svg"),a.target.closest(".task").classList.toggle("isPriority"),a.target.closest("img").classList.toggle("filter-gray"),a.target.closest("img").classList.toggle("filter-yellow")},deleteTask:a=>{t.removeTask(e.id),a.target.closest(".task").remove()}}))(t,e),n=[{name:"Edit",imgSrc:"../src/imgs/noun-quill-4626718.svg",className:"filter-gray",onClick:t=>s.setEditMode(t)},{name:"Set Priority",imgSrc:"../src/imgs/noun-star-4485746.svg",className:"filter-gray",onClick:t=>s.setPriority(t)},{name:"Delete",imgSrc:"../src/imgs/noun-skull-4485674.svg",className:"filter-red",onClick:t=>s.deleteTask(t)}];return{createToolbar:()=>{const t=a({tagName:"div",classList:"toolbar"});return t.append((t=>{const e=document.createDocumentFragment();return t.forEach((t=>{const{name:s,imgSrc:n,className:r,onClick:i}=t,c=a({tagName:"button",attributes:["aria-label",`${s}`]}),o=a({tagName:"img",attributes:["src",`${n}`],classList:r});c.onclick=i,c.append(o),e.append(c)})),e})(n)),t}}},{createTaskElements:l,renderTaskElements:u,renderExpandedTask:m,createMainDetailsElements:g}=(()=>{const t=t=>{const e=document.createDocumentFragment(),s=a({tagName:"p",classList:"task-title",textContent:t.title}),n=t.description?a({tagName:"p",classList:"task-description",textContent:t.description}):" ";return e.append(s,n),e};return{createTaskElements:(e,a)=>e.map((e=>{const s=document.createElement("div");s.className="task",s.dataset.id=e.id;const n=d(a,e).createToolbar(a,s),c=(e=>{const a=document.createElement("div");return a.classList.add("main-details"),a.appendChild(t(e)),a})(e);return s.append(n),s.append(c),s.addEventListener("dblclick",(t=>{r(t,e.id,a)})),s.addEventListener("click",(t=>{i(t,a,e.id)})),s.addEventListener("mouseover",(()=>{n.style.opacity="1",n.style.visibility="visible"})),s.addEventListener("mouseout",(()=>{n.style.opacity="0",n.style.visibility="hidden"})),s})),renderTaskElements:(t,e)=>{t.prepend(...e)},renderExpandedTask:(t,e)=>{const s=(t=>{const{dueDate:e,difficulty:s}=t,n=document.createDocumentFragment(),r=document.createElement("div");return r.classList.add("expanded-details"),n.append(r),r.append(a({tagName:"p",classList:"due-date",textContent:c(e)})),console.log(e),r.append(a({tagName:"p",classList:"difficulty",textContent:s})),n})(e);return t.append(s),s},createMainDetailsElements:t}})(),{renderListElements:p}={renderListElements:t=>{t.forEach((t=>{const s=t.getId();(t=>{e({target:".list-container",tagName:"div",classList:["list"],attributes:["data-id",t]})})(s),((t,s)=>{const r=document.querySelector(`[data-id="${s}"]`);e({target:`[data-id="${s}"]`,tagName:"h2",textContent:t.getTitle()}),r.appendChild(((t,e)=>{const s=document.createElement("form");s.className="task-form";const r=a({tagName:"input",classList:"task-input",attributes:["placeholder","Add a task"]});return s.appendChild(r),r.addEventListener("keydown",(a=>{n(a,t,e)})),s})(r,t))})(t,s),(t=>{e({target:`[data-id="${t}"]`,tagName:"div",classList:"tasks-container"})})(s),((t,e)=>{const a=document.querySelector(`[data-id="${e}"]`).querySelector(".tasks-container"),s=l(t.getTasks(),t);u(a,s)})(t,s)}))}},{checkForLists:k}={checkForLists:t=>{const e=t.getLists();e.length?p(e):((t=>{t.createList("Habits").createTask("Create your first habit!")})(t),p(t.getLists()))}},y=((e=crypto.randomUUID().slice(0,8))=>{const a=[];return{getId:()=>e,getLists:()=>a,createList:e=>(a.push(t(e)),a[a.length-1]),findList:t=>{const e=a.findIndex((e=>e.id===t));return a[e]}}})();sessionStorage.setItem("currentProject",JSON.stringify(y)),console.log(JSON.parse(sessionStorage.currentProject)),(()=>{const t=document.querySelector("#list-input");return{init:()=>{k(y),t.addEventListener("keydown",(t=>{s(t,y)}))}}})().init()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,