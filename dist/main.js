(()=>{"use strict";var t={d:(e,s)=>{for(var a in s)t.o(s,a)&&!t.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:s[a]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},e={};t.r(e),t.d(e,{ir:()=>f,$l:()=>k,vr:()=>v,eT:()=>L,rH:()=>h});const{appendCustomElement:s,createCustomElement:a}=(()=>{function t(t){const{tagName:e,classList:s,textContent:a,attributes:r}=t,n=document.createElement(e);if("string"==typeof s?n.classList.add(s):Array.isArray(s)&&n.classList.add(...s),a&&(n.textContent=a),Array.isArray(r)){const[t,e]=r;n.setAttribute(t,e)}return n}return{appendCustomElement:function(e){const{target:s}=e,a=document.querySelector(s),r=t(e);a.appendChild(r)},createCustomElement:t}})(),r=t=>{if(!t)return"";const e=new Date(t);return e.setHours(24,0,0,0),e.toLocaleDateString("en-US",{month:"2-digit",day:"2-digit",year:"2-digit"})},n=t=>{const e=t;return{createToolbar:()=>{const t=a({tagName:"div",classList:"toolbar"});return t.append((t=>{const e=document.createDocumentFragment();return t.forEach((t=>{const{name:s,imgSrc:r,className:n,onClick:i}=t,o=a({tagName:"button",attributes:["aria-label",`${s}`]}),c=a({tagName:"img",attributes:["src",`${r}`],classList:n});o.onclick=i,o.append(c),e.append(o)})),e})(e)),t}}},i=(()=>{const t={};return{getEvents:()=>t,subscribe:(e,s)=>{let a;return console.log(`Subscribing to ${e}`),t.hasOwnProperty(e)||(t[e]=[]),a=t[e].push(s)-1,{unsubscribe(){t[e].splice(a,1)}}},publish:(e,s={})=>(console.log(`Executing ${e}`),t.hasOwnProperty(e)?t[e].map((t=>t(s))):[])}})(),o=(t,e)=>{t.preventDefault();const s=t.target.closest("form"),a=s.parentNode,r=a.querySelector(".main-details");s.remove(),a.classList.remove("isEditable");const n=m(e);r.append(n)},c=(t,s)=>{const r=t=>{const s=document.createDocumentFragment(),r=a({tagName:"textarea",classList:"edit-title"});r.value=t.title,r.name="title",r.style.wordBreak="break-word",r.addEventListener("input",e.default,!1);const i=a({tagName:"textarea",classList:"edit-description",attributes:["placeholder","Add a description"]});i.value=t.description||"",i.name="description";const o=a({tagName:"input",attributes:["type","date"],classList:"edit-date"}),c=new Date;t.dueDate?o.value=t.dueDate:o.value="",o.name="dueDate",o.onclick=()=>{o.valueAsDate=o.valueAsDate=new Date(c.getFullYear(),c.getMonth(),c.getDate(),12)};const l=a({tagName:"select",classList:"edit-difficulty"});l.name="difficulty";const d=[{name:"Select a Difficulty",value:""},{name:"Easy",value:"Easy"},{name:"Medium",value:"Medium"},{name:"Hard",value:"Hard"}].map((e=>{const{name:s,value:r}=e,n=a({tagName:"option",textContent:s,attributes:["value",`${r}`]});return t.difficulty===r&&(n.selected=!0),n}));l.append(...d);const u=n(t);return s.append(r,i,o,l,u),s},n=()=>{const e=a({tagName:"div",classList:"form-controls"}),r=a({tagName:"button",classList:"submit-btn",textContent:"Submit"}),n=a({tagName:"button",classList:"cancel-btn",textContent:"Cancel"});return n.onclick=e=>o(e,t.getTaskById(s)),e.append(n,r),e};return{appendEditTaskForm:e=>{const a=(()=>{const e=document.createElement("form"),a=t.getTaskById(s);return e.id="edit-task",e.append(r(a)),e.addEventListener("submit",(e=>{((t,e,s)=>{t.preventDefault();const a=t.target,r=a.parentNode,n=r.querySelector(".main-details"),o=r.querySelector(".bottom-panel"),c=new FormData(a),l={};for(const[t,e]of c)l[t]=e;const d=e.updateTask(s.id,l);i.publish("taskUpdated",{list:e,task:d}),a.remove();const u=m(d);n.append(u),o.replaceChildren();const p=b(d);o.append(p),r.classList.remove("isEditable")})(e,t,a)})),e.addEventListener("keydown",(e=>{"Escape"===e.key&&o(e,t.getTaskById(s))})),e})();return e.append(a),a}}},l=(t,e)=>{const s=((t,e)=>({setEditMode:s=>{const a=s.target.closest(".task");if(a.classList.contains("isEditable"))return;const r=a.querySelector(".main-details");a.classList.add("isEditable"),r.replaceChildren(),a.classList.contains("expanded")&&(a.querySelector(".expanded-details").remove(),a.classList.remove("expanded"));const n=c(t,e.id).appendEditTaskForm(a);[...n.getElementsByTagName("textarea")].forEach((t=>{t.addEventListener("keydown",(t=>{if("Enter"===t.key&&!t.shiftKey){t.preventDefault();const e=new Event("submit",{bubbles:!0,cancelable:!0});n.dispatchEvent(e)}}))}))},setPriority:s=>{t.getTaskById(e.id).priority?(t.updateTask(e.id,{priority:!1}),s.target.closest("img").src="../src/imgs/noun-star-4485746.svg"):(t.updateTask(e.id,{priority:!0}),s.target.closest("img").src="../src/imgs/noun-star-4485827.svg"),s.target.closest(".task").classList.toggle("isPriority"),s.target.closest("img").classList.toggle("filter-gray"),s.target.closest("img").classList.toggle("filter-yellow")},deleteTask:s=>{t.removeTask(e.id),i.publish("taskDeleted",{list:t,task:e}),s.target.closest(".task").remove()}}))(t,e);return[{name:"Edit",imgSrc:"../src/imgs/noun-quill-4626718.svg",className:"filter-gray",onClick:t=>s.setEditMode(t)},{name:"Set Priority",imgSrc:"../src/imgs/noun-star-4485746.svg",className:"filter-gray",onClick:t=>s.setPriority(t)},{name:"Delete",imgSrc:"../src/imgs/noun-skull-4485674.svg",className:"filter-red",onClick:t=>s.deleteTask(t)}]};function d(t){console.log("Rendering task");const{list:e,task:s}=t;u(e,s)}i.subscribe("taskCreated",d),i.subscribe("taskReconstructed",d);const u=(t,e)=>{const s=document.querySelector(`[data-id="${t.getId()}"]`).querySelector(".tasks-container"),a=p(t,e);s.prepend(a)},p=(t,e)=>{const s=document.createElement("div");s.className="task",s.dataset.id=e.id;const a=n(l(t,e)).createToolbar(t,s),r=g(e),i=y(t,e.id);return s.append(a),s.append(r),s.append(i),s.addEventListener("dblclick",(s=>{L(s,e.id,t)})),s.addEventListener("click",(s=>{h(s,t,e.id)})),s.addEventListener("mouseover",(t=>{t.stopPropagation(),a.style.opacity="1",a.style.visibility="visible"})),s.addEventListener("mouseout",(()=>{a.style.opacity="0",a.style.visibility="hidden"})),s},g=t=>{const e=document.createElement("div");return e.classList.add("main-details"),e.appendChild(m(t)),e},m=t=>{const e=document.createDocumentFragment(),s=a({tagName:"p",classList:"task-title",textContent:t.title}),r=t.description?a({tagName:"p",classList:"task-description",textContent:t.description}):" ";return e.append(s,r),e},y=(t,e)=>{const s=t.getTaskById(e),r=a({tagName:"div",classList:"bottom-panel"});return r.append(b(s)),r},b=t=>{const e=document.createDocumentFragment(),s=a({tagName:"p",textContent:(t=>{switch(t){case"Easy":return"⚔️";case"Medium":return"⚔️⚔️";case"Hard":return"⚔️⚔️⚔️";default:return""}})(t.difficulty)}),n=a({tagName:"p",textContent:r(t.dueDate)||""});return e.append(n,s),e},k=(t,e)=>{if("Enter"===t.key){t.preventDefault();const s=t.target.value,a=e.createList(s);t.target.value="",i.publish("listCreated",a)}},v=(t,e)=>{if("Enter"===t.key){t.preventDefault();const s=t.target.value,a=e.createTask(s);t.target.value="",i.publish("taskCreated",{list:e,task:a})}};function f(){this.style.height="auto",this.style.height=this.scrollHeight+"px"}const L=(t,e,s)=>{const a=t.target;if(!a.classList.contains("task-title"))return;const r=a.cloneNode(!0),n=document.createElement("textarea"),i=s.getTaskById(e);n.classList.add("temp-input"),n.value=i.title,n.style.wordBreak="break-word",a.replaceWith(n),n.style.height="auto",n.style.height=n.scrollHeight+"px",n.addEventListener("keydown",(t=>{"Enter"===t.key&&n.blur()})),n.addEventListener("blur",(()=>{s.updateTask(e,{title:n.value}),r.textContent=n.value,n.replaceWith(r)}),{once:!0}),n.addEventListener("input",f,!1),n.focus()},h=(t,e,s)=>{if(t.target.classList.contains("isEditable")||!t.target.classList.contains("task"))return;const n=t.target,i=n.querySelector(".main-details"),o=n.querySelector(".expanded-details");o?(o.remove(),n.classList.remove("expanded")):(((t,e)=>{const s=(t=>{const{dueDate:e,difficulty:s}=t,n=document.createDocumentFragment(),i=document.createElement("div");return i.classList.add("expanded-details"),n.append(i),i.append(a({tagName:"p",classList:"due-date",textContent:r(e)})),i.append(a({tagName:"p",classList:"difficulty",textContent:s})),n})(e);t.after(s)})(i,e.getTaskById(s)),n.classList.add("expanded"))},E=(t,e)=>{const s=t.target,a=s.cloneNode(!0),r=document.createElement("textarea");r.classList.add("temp-input"),r.value=e.getTitle(),r.style.wordBreak="break-word",s.replaceWith(r),r.style.height="auto",r.style.height=r.scrollHeight+"px";const n=()=>{const t=e.setTitle(r.value);i.publish("listUpdated",{list:e,title:t}),a.textContent=r.value,r.replaceWith(a),a.addEventListener("dblclick",(t=>{E(t,e)}))};r.addEventListener("input",f,!1),r.focus(),r.addEventListener("blur",n,{once:!0}),r.addEventListener("keydown",(t=>{"Enter"===t.key&&r.blur(),"Escape"===t.key&&(r.removeEventListener("blur",n),r.replaceWith(a),a.addEventListener("dblclick",(t=>{E(t,e)})))}))},S=(()=>{let t=null;return{getCurrentProject:()=>t,setCurrentProject:e=>(console.log("Setting current project: "+e.getTitle()),t=e,i.publish("currentProjectSet",{title:e.getTitle(),id:e.getId()}),t)}})(),T=t=>{const e=(t=>({deleteList:e=>{const s=S.getCurrentProject().removeList(t.getId());i.publish("listDeleted",s),e.target.closest(".list").remove()}}))(t);return[{name:"Delete",imgSrc:"../src/imgs/noun-skull-4485674.svg",className:"filter-red",onClick:t=>e.deleteList(t)}]};function I(t){console.log("Rendering List"),C(t),D(t),N(t),x(t)}i.subscribe("listCreated",I),i.subscribe("listReconstructed",I);const C=t=>{s({target:".lists-container",tagName:"div",classList:["list"],attributes:["data-id",t.getId()]})},N=t=>{const e=document.querySelector(`[data-id="${t.getId()}"]`),s=a({tagName:"h2",classList:"list-title",textContent:t.getTitle()});s.addEventListener("dblclick",(e=>{E(e,t)})),e.append(s,j(t))},j=t=>{const e=document.createElement("form");e.className="task-form";const s=a({tagName:"input",classList:"task-input",attributes:["placeholder","Add a task"]});return e.appendChild(s),s.addEventListener("keydown",(e=>{v(e,t)})),e},x=t=>{s({target:`[data-id="${t.getId()}"]`,tagName:"div",classList:"tasks-container"})},D=t=>{const e=document.querySelector(`[data-id="${t.getId()}"]`),s=n(T(t)).createToolbar();e.append(s),e.addEventListener("mouseover",(()=>{s.style.opacity="1",s.style.visibility="visible"})),e.addEventListener("mouseout",(()=>{s.style.opacity="0",s.style.visibility="hidden"}))},P=(t,e=crypto.randomUUID().slice(0,8))=>{let s=t;const a=[],r=(t=>{const e=e=>t.findIndex((t=>t.id===e));return{getTaskById:e=>t.find((t=>t.id===e)),createTask:(e,s=crypto.randomUUID().slice(0,8))=>(t.push({id:s,title:e}),t[t.length-1]),updateTask:(s,a)=>{const r=e(s);return t[r]={...t[r],...a},t[r]},removeTask:s=>{const a=e(s);t.splice(a,1)}}})(a);return{getTitle:()=>s,setTitle:t=>s=t,getId:()=>e,getTasks:()=>a,createTask:(t,e)=>r.createTask(t,e),getTaskById:t=>r.getTaskById(t),updateTask:(t,e)=>r.updateTask(t,e),removeTask:t=>r.removeTask(t)}},w=(t,e=crypto.randomUUID().slice(0,8))=>{const s=[];return{getTitle:()=>t,getId:()=>e,getLists:()=>s,createList:(t,e)=>(s.push(P(t,e)),s[s.length-1]),removeList:t=>{const e=(t=>s.findIndex((e=>e.getId()===t)))(t),a=s[e];return s.splice(e,1),a}}},O=t=>{const e=localStorage.getItem(t);return JSON.parse(e)},q=(t,e)=>{e.map((e=>{const s=t.createList(e.title,e.id);i.publish("listReconstructed",s),B(s,e.tasks)}))},B=(t,e)=>{e.forEach((e=>{t.createTask(e.title,e.id);const s=t.updateTask(e.id,e);i.publish("taskReconstructed",{list:t,task:s})}))};i.subscribe("projectCreated",(function(t){const e=O("projects");e.push({title:t.getTitle(),id:t.getId(),lists:[]}),localStorage.setItem("projects",JSON.stringify(e))})),i.subscribe("listCreated",(function(t){const e=O("projects");e[U()].lists.push({title:t.getTitle(),id:t.getId(),tasks:[]}),localStorage.setItem("projects",JSON.stringify(e))})),i.subscribe("listUpdated",(function(t){const{list:e,title:s}=t,a=O("projects"),r=a[U()],n=$(e.getId());r.lists[n]={...r.lists[n],title:s},localStorage.setItem("projects",JSON.stringify(a))})),i.subscribe("listDeleted",(function(t){const{updatedProjects:e,storedList:s}=A(t.getId()),a=$(t.getId());s.splice(a,1),localStorage.setItem("projects",JSON.stringify(e))})),i.subscribe("taskCreated",(function(t){const{list:e,task:s}=t,a=O("projects");J(a,e.getId()).tasks.push(s),localStorage.setItem("projects",JSON.stringify(a))})),i.subscribe("taskUpdated",(function(t){const{list:e,task:s}=t,a=O("projects"),r=J(a,e.getId()).tasks,n=F(r,s.id);r[n]={...r[n],...s},localStorage.setItem("projects",JSON.stringify(a))})),i.subscribe("taskDeleted",(function(t){const{list:e,task:s}=t,a=O("projects"),r=J(a,e.getId()).tasks,n=F(r,s.id);r.splice(n,1),localStorage.setItem("projects",JSON.stringify(a))})),i.subscribe("currentProjectSet",(function(t){localStorage.setItem("currentProject",JSON.stringify(t))}));const J=(t,e)=>{const s=U(),a=$(e);return t[s].lists[a]},U=()=>{const t=O("projects"),e=O("currentProject");return t.findIndex((t=>t.id===e.id))},$=t=>O("projects")[U()].lists.findIndex((e=>e.id===t)),A=t=>{const e=O("projects");return{updatedProjects:e,storedList:e[U()].lists}},F=(t,e)=>t.findIndex((t=>t.id===e)),H=(()=>{const t=document.querySelector("#list-input");return{init:()=>{const e=S.getCurrentProject();t.addEventListener("keydown",(t=>{k(t,e)}))}}})();"projects"in localStorage||(console.log("Initialize projects array in storage"),localStorage.setItem("projects",JSON.stringify([]))),O("projects").length?S.setCurrentProject((()=>{const t=(()=>{const t=localStorage.getItem("projects");return JSON.parse(t)})()[U()],e=w(t.title,t.id);return i.publish("projectReconstructed",e),q(e,t.lists),e})()):(()=>{console.log("Creating default project");const t=w("Default");S.setCurrentProject(t),i.publish("projectCreated",t),(t=>{const e=t.createList("Habits"),s=e.createTask("Create your first habit!");i.publish("listCreated",e),i.publish("taskCreated",{list:e,task:s})})(t)})(),H.init()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,