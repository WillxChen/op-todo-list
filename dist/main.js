(()=>{"use strict";const{appendCustomElement:t,createCustomElement:e}=(()=>{function t(t){const{tagName:e,classList:s,textContent:a,attributes:n}=t,r=document.createElement(e);if("string"==typeof s?r.classList.add(s):Array.isArray(s)&&r.classList.add(...s),a&&(r.textContent=a),Array.isArray(n)){const[t,e]=n;r.setAttribute(t,e)}return r}return{appendCustomElement:function(e){const{target:s}=e,a=document.querySelector(s),n=t(e);a.appendChild(n)},createCustomElement:t}})(),s=t=>{if(!t)return"";const e=new Date(t);return e.setHours(24,0,0,0),e.toLocaleDateString("en-US",{month:"2-digit",day:"2-digit",year:"2-digit"})},a=(()=>{const t={};return{getEvents:()=>t,subscribe:(e,s)=>{let a;return console.log(`Subscribing to ${e}`),t.hasOwnProperty(e)||(t[e]=[]),a=t[e].push(s)-1,{unsubscribe(){t[e].splice(a,1)}}},publish:(e,s={})=>(console.log(`Executing ${e}`),t.hasOwnProperty(e)?t[e].map((t=>t(s))):[])}})(),n=(t,s)=>{const n=t=>{const s=document.createDocumentFragment(),a=e({tagName:"textarea",classList:"edit-title"});a.value=t.title,a.name="title";const n=e({tagName:"textarea",classList:"edit-description",attributes:["placeholder","Add a description"]});n.value=t.description||"",n.name="description";const i=e({tagName:"input",attributes:["type","date"],classList:"edit-date"}),c=new Date;t.dueDate?i.value=t.dueDate:i.valueAsDate=new Date(c.getFullYear(),c.getMonth(),c.getDate(),12),i.name="dueDate";const o=e({tagName:"select",classList:"edit-difficulty"});o.value=t.difficulty,o.name="difficulty";const l=["","Easy","Medium","Hard"].map((t=>e({tagName:"option",textContent:t,attributes:["value",`${t}`]})));o.append(...l);const d=r(t);return s.append(a,n,i,o,d),s},r=()=>{const a=e({tagName:"div",classList:"form-controls"}),n=e({tagName:"button",classList:"submit-btn",textContent:"Submit"}),r=e({tagName:"button",classList:"cancel-btn",textContent:"Cancel"});return r.onclick=e=>((t,e)=>{t.preventDefault();const s=t.target.closest("form"),a=s.parentNode,n=a.querySelector(".main-details");s.remove(),a.classList.remove("isEditable");const r=d(e);n.append(r)})(e,t.getTaskById(s)),a.append(r,n),a};return{appendEditTaskForm:e=>{const r=(()=>{const e=document.createElement("form"),r=t.getTaskById(s);return e.id="edit-task",e.append(n(r)),e.addEventListener("submit",(e=>{((t,e,s)=>{t.preventDefault();const n=t.target,r=n.parentNode,i=r.querySelector(".main-details"),c=r.querySelector(".bottom-panel"),o=new FormData(n),l={};for(const[t,e]of o)l[t]=e;const u=e.updateTask(s.id,l);a.publish("taskUpdated",{list:e,task:u}),n.remove();const g=d(u);i.append(g),c.replaceChildren();const m=p(u);c.append(m),r.classList.remove("isEditable")})(e,t,r)})),e})();return e.append(r),r}}},r=(t,s)=>{const a=((t,e)=>({setEditMode:s=>{const a=s.target.closest(".task");if(a.classList.contains("isEditable"))return;const r=a.querySelector(".main-details");a.classList.add("isEditable"),r.replaceChildren(),a.classList.contains("expanded")&&(a.querySelector(".expanded-details").remove(),a.classList.remove("expanded"));const i=n(t,e.id).appendEditTaskForm(a);[...i.getElementsByTagName("textarea")].forEach((t=>{t.addEventListener("keydown",(t=>{if("Enter"===t.key&&!t.shiftKey){t.preventDefault();const e=new Event("submit",{bubbles:!0,cancelable:!0});i.dispatchEvent(e)}}))}))},setPriority:s=>{t.getTaskById(e.id).priority?(t.updateTask(e.id,{priority:!1}),s.target.closest("img").src="../src/imgs/noun-star-4485746.svg"):(t.updateTask(e.id,{priority:!0}),s.target.closest("img").src="../src/imgs/noun-star-4485827.svg"),s.target.closest(".task").classList.toggle("isPriority"),s.target.closest("img").classList.toggle("filter-gray"),s.target.closest("img").classList.toggle("filter-yellow")},deleteTask:s=>{t.removeTask(e.id),s.target.closest(".task").remove()}}))(t,s),r=[{name:"Edit",imgSrc:"../src/imgs/noun-quill-4626718.svg",className:"filter-gray",onClick:t=>a.setEditMode(t)},{name:"Set Priority",imgSrc:"../src/imgs/noun-star-4485746.svg",className:"filter-gray",onClick:t=>a.setPriority(t)},{name:"Delete",imgSrc:"../src/imgs/noun-skull-4485674.svg",className:"filter-red",onClick:t=>a.deleteTask(t)}];return{createToolbar:()=>{const t=e({tagName:"div",classList:"toolbar"});return t.append((t=>{const s=document.createDocumentFragment();return t.forEach((t=>{const{name:a,imgSrc:n,className:r,onClick:i}=t,c=e({tagName:"button",attributes:["aria-label",`${a}`]}),o=e({tagName:"img",attributes:["src",`${n}`],classList:r});c.onclick=i,c.append(o),s.append(c)})),s})(r)),t}}};function i(t){console.log("Rendering task");const{list:e,task:s}=t;c(e,s)}a.subscribe("taskCreated",i),a.subscribe("taskReconstructed",i);const c=(t,e)=>{const s=document.querySelector(`[data-id="${t.getId()}"]`).querySelector(".tasks-container"),a=o(t,e);s.prepend(a)},o=(t,e)=>{const s=document.createElement("div");s.className="task",s.dataset.id=e.id;const a=r(t,e).createToolbar(t,s),n=l(e),i=u(t,e.id);return s.append(a),s.append(n),s.append(i),s.addEventListener("dblclick",(s=>{m(s,e.id,t)})),s.addEventListener("click",(s=>{k(s,t,e.id)})),s.addEventListener("mouseover",(()=>{a.style.opacity="1",a.style.visibility="visible"})),s.addEventListener("mouseout",(()=>{a.style.opacity="0",a.style.visibility="hidden"})),s},l=t=>{const e=document.createElement("div");return e.classList.add("main-details"),e.appendChild(d(t)),e},d=t=>{const s=document.createDocumentFragment(),a=e({tagName:"p",classList:"task-title",textContent:t.title}),n=t.description?e({tagName:"p",classList:"task-description",textContent:t.description}):" ";return s.append(a,n),s},u=(t,s)=>{const a=t.getTaskById(s),n=e({tagName:"div",classList:"bottom-panel"});return n.append(p(a)),n},p=t=>{const a=document.createDocumentFragment(),n=e({tagName:"p",textContent:(t=>{switch(t){case"Easy":return"⚔️";case"Medium":return"⚔️⚔️";case"Hard":return"⚔️⚔️⚔️";default:return""}})(t.difficulty)}),r=e({tagName:"p",textContent:s(t.dueDate)||""});return a.append(r,n),a};function g(){this.style.height="auto",this.style.height=this.scrollHeight+"px"}const m=(t,e,s)=>{const a=t.target;if(!a.classList.contains("task-title"))return;const n=a.cloneNode(!0),r=document.createElement("textarea"),i=s.getTaskById(e);r.classList.add("temp-input"),r.value=i.title,r.style.wordBreak="break-word",a.replaceWith(r),r.style.height="auto",r.style.height=r.scrollHeight+"px",r.addEventListener("keydown",(t=>{"Enter"===t.key&&r.blur()})),r.addEventListener("blur",(()=>{s.updateTask(e,{title:r.value}),n.textContent=r.value,r.replaceWith(n)}),{once:!0}),r.addEventListener("input",g,!1),r.focus()},k=(t,a,n)=>{if(t.target.classList.contains("isEditable")||!t.target.classList.contains("task"))return;const r=t.target,i=r.querySelector(".main-details"),c=r.querySelector(".expanded-details");c?(c.remove(),r.classList.remove("expanded")):(((t,a)=>{const n=(t=>{const{dueDate:a,difficulty:n}=t,r=document.createDocumentFragment(),i=document.createElement("div");return i.classList.add("expanded-details"),r.append(i),i.append(e({tagName:"p",classList:"due-date",textContent:s(a)})),console.log(a),i.append(e({tagName:"p",classList:"difficulty",textContent:n})),r})(a);t.after(n)})(i,a.getTaskById(n)),r.classList.add("expanded"))};function y(t){console.log("Rendering List"),b(t),f(t),L(t)}a.subscribe("listCreated",y),a.subscribe("listReconstructed",y);const b=e=>{t({target:".lists-container",tagName:"div",classList:["list"],attributes:["data-id",e.getId()]})},f=e=>{const s=document.querySelector(`[data-id="${e.getId()}"]`);t({target:`[data-id="${e.getId()}"]`,tagName:"h2",textContent:e.getTitle()}),s.appendChild(v(e))},v=t=>{const s=document.createElement("form");s.className="task-form";const n=e({tagName:"input",classList:"task-input",attributes:["placeholder","Add a task"]});return s.appendChild(n),n.addEventListener("keydown",(e=>{((t,e)=>{if("Enter"===t.key){t.preventDefault();const s=t.target.value,n=e.createTask(s);t.target.value="",a.publish("taskCreated",{list:e,task:n})}})(e,t)})),s},L=e=>{t({target:`[data-id="${e.getId()}"]`,tagName:"div",classList:"tasks-container"})},h=(()=>{let t=null;return{getCurrentProject:()=>t,setCurrentProject:e=>(console.log("Setting current project: "+e.getTitle()),t=e,a.publish("currentProjectSet",{title:e.getTitle(),id:e.getId()}),t)}})(),E=(t,e=crypto.randomUUID().slice(0,8))=>{const s=[],a=(t=>{const e=e=>t.findIndex((t=>t.id===e));return{getTaskById:e=>t.find((t=>t.id===e)),createTask:(e,s=crypto.randomUUID().slice(0,8))=>(t.push({id:s,title:e}),t[t.length-1]),updateTask:(s,a)=>{const n=e(s);return t[n]={...t[n],...a},t[n]},removeTask:s=>{const a=e(s);t.splice(a,1)}}})(s);return{getTitle:()=>t,getId:()=>e,getTasks:()=>s,createTask:(t,e)=>a.createTask(t,e),getTaskById:t=>a.getTaskById(t),updateTask:(t,e)=>a.updateTask(t,e),removeTask:t=>a.removeTask(t)}},C=(t,e=crypto.randomUUID().slice(0,8))=>{const s=[];return{getTitle:()=>t,getId:()=>e,getLists:()=>s,createList:(t,e)=>(s.push(E(t,e)),s[s.length-1]),getListById:t=>{const e=s.findIndex((e=>e.getId()===t));return s[e]}}},S=t=>{const e=localStorage.getItem(t);return JSON.parse(e)},T=(t,e)=>{e.map((e=>{const s=t.createList(e.title,e.id);a.publish("listReconstructed",s),N(s,e.tasks)}))},N=(t,e)=>{e.forEach((e=>{t.createTask(e.title,e.id);const s=t.updateTask(e.id,e);a.publish("taskReconstructed",{list:t,task:s})}))};a.subscribe("projectCreated",(function(t){const e=S("projects");e.push({title:t.getTitle(),id:t.getId(),lists:[]}),localStorage.setItem("projects",JSON.stringify(e))})),a.subscribe("listCreated",(function(t){const e=S("projects"),s=I();console.log(e[s]),e[s].lists.push({title:t.getTitle(),id:t.getId(),tasks:[]}),localStorage.setItem("projects",JSON.stringify(e))})),a.subscribe("taskCreated",(function(t){const{list:e,task:s}=t,a=S("projects"),n=I(),r=x(e.getId());a[n].lists[r].tasks.push(s),localStorage.setItem("projects",JSON.stringify(a))})),a.subscribe("taskUpdated",(function(t){const{list:e,task:s}=t,a=S("projects"),n=I(),r=x(e.getId()),i=a[n].lists[r].tasks,c=j(i,s.id);console.log("Storing task"),i[c]={...i[c],...s},localStorage.setItem("projects",JSON.stringify(a))})),a.subscribe("currentProjectSet",(function(t){localStorage.setItem("currentProject",JSON.stringify(t))}));const I=()=>{const t=S("projects"),e=S("currentProject");return t.findIndex((t=>t.id===e.id))},x=t=>S("projects")[I()].lists.findIndex((e=>e.id===t)),j=(t,e)=>t.findIndex((t=>t.id===e)),D=(()=>{const t=document.querySelector("#list-input");return{init:()=>{const e=h.getCurrentProject();t.addEventListener("keydown",(t=>{((t,e)=>{if("Enter"===t.key){t.preventDefault();const s=t.target.value,n=e.createList(s);t.target.value="",a.publish("listCreated",n)}})(t,e)}))}}})();(()=>{if(!("projects"in localStorage))return console.log("Initialize projects array in storage"),localStorage.setItem("projects",JSON.stringify([])),void(()=>{console.log("Creating default project");const t=C("Default");h.setCurrentProject(t),a.publish("projectCreated",t),(t=>{const e=t.createList("Habits"),s=e.createTask("Create your first habit!");a.publish("listCreated",e),a.publish("taskCreated",{list:e,task:s})})(t)})();h.setCurrentProject((()=>{const t=(()=>{const t=localStorage.getItem("projects");return JSON.parse(t)})()[I()],e=C(t.title,t.id);return a.publish("projectReconstructed",e),T(e,t.lists),e})())})(),D.init()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,