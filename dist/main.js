(()=>{"use strict";const t=(t,e=crypto.randomUUID().slice(0,8))=>{const a=[],s=(t=>{const e=e=>t.findIndex((t=>t.id===e));return{getTaskById:e=>t.find((t=>t.id===e)),createTask:e=>(t.push({id:crypto.randomUUID().slice(0,8),title:e}),t[t.length-1]),updateTask:(a,s)=>{const r=e(a);t[r]={...t[r],...s}},removeTask:a=>{const s=e(a);t.splice(s,1)}}})(a);return{getTitle:()=>t,getId:()=>e,getTasks:()=>a,createTask:t=>s.createTask(t),getTaskById:t=>s.getTaskById(t),updateTask:(t,e)=>s.updateTask(t,e),removeTask:t=>s.removeTask(t)}},{appendCustomElement:e,createCustomElement:a}=(()=>{function t(t){const{tagName:e,classList:a,textContent:s,attributes:r}=t,n=document.createElement(e);if("string"==typeof a?n.classList.add(a):Array.isArray(a)&&n.classList.add(...a),s&&(n.textContent=s),Array.isArray(r)){const[t,e]=r;n.setAttribute(t,e)}return n}return{appendCustomElement:function(e){const{target:a}=e,s=document.querySelector(a),r=t(e);s.appendChild(r)},createCustomElement:t}})(),{handleCreateListInput:s,handleCreateTaskInput:r,editTask:n,toggleDetails:i}=(()=>{function t(){this.style.height="auto",this.style.height=this.scrollHeight+"px"}return{handleCreateListInput:(t,e)=>{if("Enter"===t.key){t.preventDefault();const a=t.target.value,s=e.createList(a);g([s]),t.target.value=""}},handleCreateTaskInput:(t,e,a)=>{if("Enter"===t.key){t.preventDefault();const s=t.target.value,r=a.createTask(s),n=o([r],a);d(e.querySelector(".task-container"),n),t.target.value=""}},editTask:(e,a,s)=>{const r=e.target;if(!r.classList.contains("task-title"))return;const n=r.cloneNode(!0),i=document.createElement("textarea"),c=s.getTaskById(a);i.classList.add("temp-input"),i.value=c.title,i.style.wordBreak="break-word",r.replaceWith(i),i.style.height="auto",i.style.height=i.scrollHeight+"px",i.addEventListener("keydown",(t=>{"Enter"===t.key&&i.blur()})),i.addEventListener("blur",(()=>{s.updateTask(a,{title:i.value}),n.textContent=i.value,i.replaceWith(n)}),{once:!0}),i.addEventListener("input",t,!1),i.focus()},toggleDetails:(t,e)=>{if("IMG"===t.target.tagName||"P"===t.target.tagName||"TEXTAREA"===t.target.tagName)return;const a=t.target.closest(".task"),s=a.querySelector(".expanded-details");a.classList.toggle("expanded"),s?s.remove():l(a,e)}}})(),c=(t,e)=>{const s=((t,e)=>({setEditMode:t=>{t.target.closest(".expanded-details")},setPriority:a=>{t.getTaskById(e.id).priority?(t.updateTask(e.id,{priority:!1}),a.target.closest("img").src="../src/imgs/noun-star-4485746.svg"):(t.updateTask(e.id,{priority:!0}),a.target.closest("img").src="../src/imgs/noun-star-4485827.svg"),a.target.closest(".task").classList.toggle("isPriority"),a.target.closest("img").classList.toggle("filter-gray"),a.target.closest("img").classList.toggle("filter-yellow")},deleteTask:a=>{t.removeTask(e.id),a.target.closest(".task").remove()}}))(t,e),r=[{name:"Edit",imgSrc:"../src/imgs/noun-quill-4626718.svg",className:"filter-gray"},{name:"Set Priority",imgSrc:"../src/imgs/noun-star-4485746.svg",className:"filter-gray",onClick:t=>s.setPriority(t)},{name:"Delete",imgSrc:"../src/imgs/noun-skull-4485674.svg",className:"filter-red",onClick:t=>s.deleteTask(t)}];return{createToolbar:()=>{const t=a({tagName:"div",classList:"toolbar"});return t.append((t=>{const e=document.createDocumentFragment();return t.forEach((t=>{const{name:s,imgSrc:r,className:n,onClick:i}=t,c=a({tagName:"button",attribute:["aria-label",`${s}`]}),o=a({tagName:"img",attributes:["src",`${r}`],classList:n});c.onclick=i,c.append(o),e.append(c)})),e})(r)),t}}},{createTaskElements:o,renderTaskElements:d,renderExpandedTask:l}={createTaskElements:(t,e)=>t.map((t=>{const s=document.createElement("div");s.className="task",s.dataset.id=t.id;const r=a({tagName:"p",classList:"task-title",textContent:t.title});s.append(r);const o=c(e,t);return s.append(o.createToolbar(e,s)),s.addEventListener("dblclick",(a=>{n(a,t.id,e)})),s.addEventListener("click",(e=>{i(e,t)})),s})),renderTaskElements:(t,e)=>{t.prepend(...e)},renderExpandedTask:(t,e)=>{const s=(t=>{const{description:e,dueDate:s,difficulty:r}=t,n=document.createDocumentFragment(),i=document.createElement("div");return i.classList.add("expanded-details"),n.append(i),i.append(a({tagName:"p",classList:"description",textContent:"description"})),i.append(a({tagName:"p",classList:"due-date",textContent:"dueDate"})),i.append(a({tagName:"p",classList:"difficulty",textContent:"difficulty"})),n})(e);return t.append(s),s}},{renderListElements:g}={renderListElements:t=>{t.forEach((t=>{const s=t.getId();(t=>{e({target:".list-container",tagName:"div",classList:["list"],attributes:["data-id",t]})})(s),((t,s)=>{const n=document.querySelector(`[data-id="${s}"]`);e({target:`[data-id="${s}"]`,tagName:"h2",textContent:t.getTitle()}),n.appendChild(((t,e)=>{const s=document.createElement("form");s.className="task-form";const n=a({tagName:"input",classList:"task-input",attributes:["placeholder","Add a task"]});return s.appendChild(n),n.addEventListener("keydown",(a=>{r(a,t,e)})),s})(n,t))})(t,s),(t=>{e({target:`[data-id="${t}"]`,tagName:"div",classList:"task-container"})})(s),((t,e)=>{const a=document.querySelector(`[data-id="${e}"]`).querySelector(".task-container"),s=o(t.getTasks(),t);d(a,s)})(t,s)}))}},{checkForLists:u}={checkForLists:t=>{const e=t.getLists();e.length?g(e):((t=>{t.createList("Habits").createTask("Create your first habit!")})(t),g(t.getLists()))}},m=((e=crypto.randomUUID().slice(0,8))=>{const a=[];return{getId:()=>e,getLists:()=>a,createList:e=>(a.push(t(e)),a[a.length-1]),findList:t=>{const e=a.findIndex((e=>e.id===t));return a[e]}}})();sessionStorage.setItem("currentProject",JSON.stringify(m)),console.log(JSON.parse(sessionStorage.currentProject)),(()=>{const t=document.querySelector("#list-input");return{init:()=>{u(m),t.addEventListener("keydown",(t=>{s(t,m)}))}}})().init()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,