(()=>{"use strict";const t=(t,e)=>{const a=[{title:1234,id:1},{title:45687,id:2}],n={getTaskById:(t,e)=>t.find((t=>t.id===e)),createTask:(t,e)=>(t.push({id:crypto.randomUUID().slice(0,8),title:e}),t[t.length-1]),updateTask:(t,e,a)=>{const n=t.findIndex((t=>t.id===e));t[n]={...t[n],...a}}};return{getTitle:()=>t,getId:()=>e,getTasks:()=>a,createTask:t=>n.createTask(a,t),updateTask:(t,e)=>n.updateTask(a,t,e),getTaskById:t=>n.getTaskById(a,t)}},e=()=>{const t=[];return{getLists:()=>t,addList:e=>t.push(e),findList:e=>{const a=t.findIndex((t=>t.id===e));return t[a]}}};function a(t){const{target:e,tagName:a,classList:n,textContent:s,attributes:r}=t,d=document.querySelector(e),i=document.createElement(a);if("string"==typeof n?i.classList.add(n):Array.isArray(n)&&i.classList.add(...n),s&&(i.textContent=s),Array.isArray(r)){const[t,e]=r;i.setAttribute(t,e)}d.appendChild(i)}const{createTaskElements:n,renderTaskElements:s}={createTaskElements:(t,e)=>t.map((t=>{const a=document.createElement("div");a.className="task",a.dataset.id=t.id;const n=document.createElement("p");return n.textContent=t.title,a.appendChild(n),a.addEventListener("click",(a=>{((t,e,a)=>{const n=t.target,s=n.cloneNode(!0),r=document.createElement("input"),d=a.getTaskById(e);r.value=d.title,n.replaceWith(r),r.addEventListener("keydown",(t=>{"Enter"===t.key&&r.blur()})),r.addEventListener("blur",(()=>{a.updateTask(e,{title:r.value}),s.textContent=r.value,r.replaceWith(s)}),{once:!0}),r.focus()})(a,t.id,e)})),a})),renderTaskElements:(t,e)=>{t.append(...e)}},r=e(),d={renderListElements:t=>{t.forEach((t=>{const e=t.getId();(t=>{a({target:".list-container",tagName:"div",classList:["list"],attributes:["data-id",t]})})(e),((t,e)=>{const r=document.querySelector(`[data-id="${e}"]`);a({target:`[data-id="${e}"]`,tagName:"h2",textContent:t.getTitle()}),document.querySelector(`[data-id="${e}"]`).appendChild(((t,e)=>{const a=document.createElement("form");a.className="task-form";const r=document.createElement("input");return r.className="task-input",a.appendChild(r),r.addEventListener("keydown",(a=>{if("Enter"===a.key){a.preventDefault();const d=a.target.value,i=e.createTask(d),c=n([i],e);s(t.querySelector(".task-container"),c),r.value=""}})),a})(r,t))})(t,e),(t=>{a({target:`[data-id="${t}"]`,tagName:"div",classList:"task-container"})})(e),((t,e)=>{const a=document.querySelector(`[data-id="${e}"]`).querySelector(".task-container"),r=n(t.getTasks(),t);s(a,r)})(t,e)}))}},i=(()=>{const e=document.querySelector("#list-input");return{init:()=>{const a=r.getLists();a.length&&d.renderListElements(a),e.addEventListener("keydown",(a=>{if("Enter"===a.key){a.preventDefault();const n=a.target.value,s=crypto.randomUUID().slice(0,8),i=t(n,s);r.addList(i),d.renderListElements([i]),e.value=""}}))}}})();e().getLists(),i.init()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,